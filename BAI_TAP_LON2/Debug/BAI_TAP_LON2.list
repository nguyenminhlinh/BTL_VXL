
BAI_TAP_LON2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030dc  080030dc  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  080030dc  080030dc  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030dc  080030dc  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030dc  080030dc  000130dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  080030e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  20000054  08003138  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08003138  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096a1  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba1  00000000  00000000  0002971e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c4c  00000000  00000000  0002c690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b979  00000000  00000000  000432dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008218a  00000000  00000000  0004ec55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0ddf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000290c  00000000  00000000  000d0e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	080030a4 	.word	0x080030a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	080030a4 	.word	0x080030a4

0800014c <getKeyInput1>:
int button_flag2 = 0;
int button_flag3 = 0;
int button_flag4 = 0;


void getKeyInput1(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	key01 = key11;
 8000150:	4b17      	ldr	r3, [pc, #92]	; (80001b0 <getKeyInput1+0x64>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a17      	ldr	r2, [pc, #92]	; (80001b4 <getKeyInput1+0x68>)
 8000156:	6013      	str	r3, [r2, #0]
	key11 = key21;
 8000158:	4b17      	ldr	r3, [pc, #92]	; (80001b8 <getKeyInput1+0x6c>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a14      	ldr	r2, [pc, #80]	; (80001b0 <getKeyInput1+0x64>)
 800015e:	6013      	str	r3, [r2, #0]
	key21 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000160:	2110      	movs	r1, #16
 8000162:	4816      	ldr	r0, [pc, #88]	; (80001bc <getKeyInput1+0x70>)
 8000164:	f001 fc18 	bl	8001998 <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	461a      	mov	r2, r3
 800016c:	4b12      	ldr	r3, [pc, #72]	; (80001b8 <getKeyInput1+0x6c>)
 800016e:	601a      	str	r2, [r3, #0]
	if((key01 == key11) && (key11 == key21)){
 8000170:	4b10      	ldr	r3, [pc, #64]	; (80001b4 <getKeyInput1+0x68>)
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <getKeyInput1+0x64>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	429a      	cmp	r2, r3
 800017a:	d116      	bne.n	80001aa <getKeyInput1+0x5e>
 800017c:	4b0c      	ldr	r3, [pc, #48]	; (80001b0 <getKeyInput1+0x64>)
 800017e:	681a      	ldr	r2, [r3, #0]
 8000180:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <getKeyInput1+0x6c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	429a      	cmp	r2, r3
 8000186:	d110      	bne.n	80001aa <getKeyInput1+0x5e>
		if(key31 != key21){
 8000188:	4b0d      	ldr	r3, [pc, #52]	; (80001c0 <getKeyInput1+0x74>)
 800018a:	681a      	ldr	r2, [r3, #0]
 800018c:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <getKeyInput1+0x6c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	429a      	cmp	r2, r3
 8000192:	d00a      	beq.n	80001aa <getKeyInput1+0x5e>
			key31 = key21;
 8000194:	4b08      	ldr	r3, [pc, #32]	; (80001b8 <getKeyInput1+0x6c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <getKeyInput1+0x74>)
 800019a:	6013      	str	r3, [r2, #0]
			if(key21== PRESSED_STATE){
 800019c:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <getKeyInput1+0x6c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d102      	bne.n	80001aa <getKeyInput1+0x5e>
				button_flag1 = 1;
 80001a4:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <getKeyInput1+0x78>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	20000004 	.word	0x20000004
 80001b4:	20000000 	.word	0x20000000
 80001b8:	20000008 	.word	0x20000008
 80001bc:	40010800 	.word	0x40010800
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	20000070 	.word	0x20000070

080001c8 <getKeyInput2>:

void getKeyInput2(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	key02 = key12;
 80001cc:	4b17      	ldr	r3, [pc, #92]	; (800022c <getKeyInput2+0x64>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a17      	ldr	r2, [pc, #92]	; (8000230 <getKeyInput2+0x68>)
 80001d2:	6013      	str	r3, [r2, #0]
	key12 = key22;
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <getKeyInput2+0x6c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a14      	ldr	r2, [pc, #80]	; (800022c <getKeyInput2+0x64>)
 80001da:	6013      	str	r3, [r2, #0]
	key22 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 80001dc:	2101      	movs	r1, #1
 80001de:	4816      	ldr	r0, [pc, #88]	; (8000238 <getKeyInput2+0x70>)
 80001e0:	f001 fbda 	bl	8001998 <HAL_GPIO_ReadPin>
 80001e4:	4603      	mov	r3, r0
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <getKeyInput2+0x6c>)
 80001ea:	601a      	str	r2, [r3, #0]
	if((key02 == key12) && (key12 == key22)){
 80001ec:	4b10      	ldr	r3, [pc, #64]	; (8000230 <getKeyInput2+0x68>)
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <getKeyInput2+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d116      	bne.n	8000226 <getKeyInput2+0x5e>
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <getKeyInput2+0x64>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <getKeyInput2+0x6c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	429a      	cmp	r2, r3
 8000202:	d110      	bne.n	8000226 <getKeyInput2+0x5e>
		if(key32 != key22){
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <getKeyInput2+0x74>)
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <getKeyInput2+0x6c>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	429a      	cmp	r2, r3
 800020e:	d00a      	beq.n	8000226 <getKeyInput2+0x5e>
			key32 = key22;
 8000210:	4b08      	ldr	r3, [pc, #32]	; (8000234 <getKeyInput2+0x6c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a09      	ldr	r2, [pc, #36]	; (800023c <getKeyInput2+0x74>)
 8000216:	6013      	str	r3, [r2, #0]
			if(key22 == PRESSED_STATE){
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <getKeyInput2+0x6c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d102      	bne.n	8000226 <getKeyInput2+0x5e>
				button_flag2= 1;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <getKeyInput2+0x78>)
 8000222:	2201      	movs	r2, #1
 8000224:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000024 	.word	0x20000024
 8000230:	20000020 	.word	0x20000020
 8000234:	20000028 	.word	0x20000028
 8000238:	40010c00 	.word	0x40010c00
 800023c:	2000002c 	.word	0x2000002c
 8000240:	20000074 	.word	0x20000074

08000244 <getKeyInput3>:

void getKeyInput3(){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	key03 = key13;
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <getKeyInput3+0x64>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a17      	ldr	r2, [pc, #92]	; (80002ac <getKeyInput3+0x68>)
 800024e:	6013      	str	r3, [r2, #0]
	key13 = key23;
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <getKeyInput3+0x6c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <getKeyInput3+0x64>)
 8000256:	6013      	str	r3, [r2, #0]
	key23 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000258:	2102      	movs	r1, #2
 800025a:	4816      	ldr	r0, [pc, #88]	; (80002b4 <getKeyInput3+0x70>)
 800025c:	f001 fb9c 	bl	8001998 <HAL_GPIO_ReadPin>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <getKeyInput3+0x6c>)
 8000266:	601a      	str	r2, [r3, #0]
	if((key03 == key13) && (key13 == key23)){
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <getKeyInput3+0x68>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <getKeyInput3+0x64>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d116      	bne.n	80002a2 <getKeyInput3+0x5e>
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <getKeyInput3+0x64>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b0d      	ldr	r3, [pc, #52]	; (80002b0 <getKeyInput3+0x6c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	d110      	bne.n	80002a2 <getKeyInput3+0x5e>
		if(key33 != key23){
 8000280:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <getKeyInput3+0x74>)
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <getKeyInput3+0x6c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	429a      	cmp	r2, r3
 800028a:	d00a      	beq.n	80002a2 <getKeyInput3+0x5e>
			key33 = key23;
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <getKeyInput3+0x6c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <getKeyInput3+0x74>)
 8000292:	6013      	str	r3, [r2, #0]
			if(key23 == PRESSED_STATE){
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <getKeyInput3+0x6c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d102      	bne.n	80002a2 <getKeyInput3+0x5e>
				button_flag3= 1;
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <getKeyInput3+0x78>)
 800029e:	2201      	movs	r2, #1
 80002a0:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000014 	.word	0x20000014
 80002ac:	20000010 	.word	0x20000010
 80002b0:	20000018 	.word	0x20000018
 80002b4:	40010c00 	.word	0x40010c00
 80002b8:	2000001c 	.word	0x2000001c
 80002bc:	20000078 	.word	0x20000078

080002c0 <getKeyInput4>:

void getKeyInput4(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	key04 = key14;
 80002c4:	4b17      	ldr	r3, [pc, #92]	; (8000324 <getKeyInput4+0x64>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a17      	ldr	r2, [pc, #92]	; (8000328 <getKeyInput4+0x68>)
 80002ca:	6013      	str	r3, [r2, #0]
	key14 = key24;
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <getKeyInput4+0x6c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a14      	ldr	r2, [pc, #80]	; (8000324 <getKeyInput4+0x64>)
 80002d2:	6013      	str	r3, [r2, #0]
	key24 = HAL_GPIO_ReadPin(BUTTON_4_GPIO_Port, BUTTON_4_Pin);
 80002d4:	2104      	movs	r1, #4
 80002d6:	4816      	ldr	r0, [pc, #88]	; (8000330 <getKeyInput4+0x70>)
 80002d8:	f001 fb5e 	bl	8001998 <HAL_GPIO_ReadPin>
 80002dc:	4603      	mov	r3, r0
 80002de:	461a      	mov	r2, r3
 80002e0:	4b12      	ldr	r3, [pc, #72]	; (800032c <getKeyInput4+0x6c>)
 80002e2:	601a      	str	r2, [r3, #0]
	if((key04 == key14) && (key14 == key24)){
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <getKeyInput4+0x68>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <getKeyInput4+0x64>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d116      	bne.n	800031e <getKeyInput4+0x5e>
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <getKeyInput4+0x64>)
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <getKeyInput4+0x6c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d110      	bne.n	800031e <getKeyInput4+0x5e>
		if(key34 != key24){
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <getKeyInput4+0x74>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <getKeyInput4+0x6c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	429a      	cmp	r2, r3
 8000306:	d00a      	beq.n	800031e <getKeyInput4+0x5e>
			key34 = key24;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <getKeyInput4+0x6c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <getKeyInput4+0x74>)
 800030e:	6013      	str	r3, [r2, #0]
			if(key24 == PRESSED_STATE){
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <getKeyInput4+0x6c>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d102      	bne.n	800031e <getKeyInput4+0x5e>
				button_flag4= 1;
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <getKeyInput4+0x78>)
 800031a:	2201      	movs	r2, #1
 800031c:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000034 	.word	0x20000034
 8000328:	20000030 	.word	0x20000030
 800032c:	20000038 	.word	0x20000038
 8000330:	40010c00 	.word	0x40010c00
 8000334:	2000003c 	.word	0x2000003c
 8000338:	2000007c 	.word	0x2000007c

0800033c <control_unit>:



#include "control.h"

void control_unit(){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	if(button_flag1 == 1 && mode != 5)
 8000340:	4b2a      	ldr	r3, [pc, #168]	; (80003ec <control_unit+0xb0>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d10b      	bne.n	8000360 <control_unit+0x24>
 8000348:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <control_unit+0xb4>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b05      	cmp	r3, #5
 800034e:	d007      	beq.n	8000360 <control_unit+0x24>
	{
		mode = mode +1;
 8000350:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <control_unit+0xb4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	3301      	adds	r3, #1
 8000356:	4a26      	ldr	r2, [pc, #152]	; (80003f0 <control_unit+0xb4>)
 8000358:	6013      	str	r3, [r2, #0]
		button_flag1 = 0;
 800035a:	4b24      	ldr	r3, [pc, #144]	; (80003ec <control_unit+0xb0>)
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
	}
	if(mode == 1)
 8000360:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <control_unit+0xb4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d111      	bne.n	800038c <control_unit+0x50>
	{
		fsm_automatic_run(global_red, global_green, global_yellow);
 8000368:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <control_unit+0xb8>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a22      	ldr	r2, [pc, #136]	; (80003f8 <control_unit+0xbc>)
 800036e:	6811      	ldr	r1, [r2, #0]
 8000370:	4a22      	ldr	r2, [pc, #136]	; (80003fc <control_unit+0xc0>)
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f84b 	bl	8000410 <fsm_automatic_run>
		fsm_automatic_run2(global_red, global_green, global_yellow);
 800037a:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <control_unit+0xb8>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a1e      	ldr	r2, [pc, #120]	; (80003f8 <control_unit+0xbc>)
 8000380:	6811      	ldr	r1, [r2, #0]
 8000382:	4a1e      	ldr	r2, [pc, #120]	; (80003fc <control_unit+0xc0>)
 8000384:	6812      	ldr	r2, [r2, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f000 f97e 	bl	8000688 <fsm_automatic_run2>
	}
	if(mode == 2)
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <control_unit+0xb4>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b02      	cmp	r3, #2
 8000392:	d101      	bne.n	8000398 <control_unit+0x5c>
	{
	    fsm_automatic_run3();
 8000394:	f000 fa0a 	bl	80007ac <fsm_automatic_run3>
	}

	if(mode == 3)
 8000398:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <control_unit+0xb4>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b03      	cmp	r3, #3
 800039e:	d101      	bne.n	80003a4 <control_unit+0x68>
	{
		fsm_automatic_run4();
 80003a0:	f000 fa72 	bl	8000888 <fsm_automatic_run4>
	}

	if(mode == 4)
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <control_unit+0xb4>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b04      	cmp	r3, #4
 80003aa:	d108      	bne.n	80003be <control_unit+0x82>
	{
		mode = 1;
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <control_unit+0xb4>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	601a      	str	r2, [r3, #0]
		status = INIT;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <control_unit+0xc4>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
		status1 = INIT;
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <control_unit+0xc8>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	601a      	str	r2, [r3, #0]
	}
	if(button_flag4 == 1)
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <control_unit+0xcc>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d110      	bne.n	80003e8 <control_unit+0xac>
	{
		ped = 1;
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <control_unit+0xd0>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	601a      	str	r2, [r3, #0]
		setTimer3(global_green+global_red+global_yellow);
 80003cc:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <control_unit+0xbc>)
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <control_unit+0xb8>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	441a      	add	r2, r3
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <control_unit+0xc0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4413      	add	r3, r2
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 ff63 	bl	80012a8 <setTimer3>
		button_flag4 = 0;
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <control_unit+0xcc>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
	}

}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000070 	.word	0x20000070
 80003f0:	20000040 	.word	0x20000040
 80003f4:	20000088 	.word	0x20000088
 80003f8:	2000008c 	.word	0x2000008c
 80003fc:	20000090 	.word	0x20000090
 8000400:	20000080 	.word	0x20000080
 8000404:	20000084 	.word	0x20000084
 8000408:	2000007c 	.word	0x2000007c
 800040c:	2000009c 	.word	0x2000009c

08000410 <fsm_automatic_run>:
 *  Created on: Dec 3, 2022
 *      Author: Hong Phat
 */
#include "fsm_automatic.h"
#include "main.h"
void fsm_automatic_run(int x, int y, int z){
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
	switch(status){
 800041c:	4b90      	ldr	r3, [pc, #576]	; (8000660 <fsm_automatic_run+0x250>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3b01      	subs	r3, #1
 8000422:	2b03      	cmp	r3, #3
 8000424:	f200 8111 	bhi.w	800064a <fsm_automatic_run+0x23a>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <fsm_automatic_run+0x20>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000441 	.word	0x08000441
 8000434:	08000595 	.word	0x08000595
 8000438:	0800046f 	.word	0x0800046f
 800043c:	08000503 	.word	0x08000503
		case INIT:
		    status = AUTO_GREEN;
 8000440:	4b87      	ldr	r3, [pc, #540]	; (8000660 <fsm_automatic_run+0x250>)
 8000442:	2203      	movs	r2, #3
 8000444:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, 0);
 8000446:	2200      	movs	r2, #0
 8000448:	2110      	movs	r1, #16
 800044a:	4886      	ldr	r0, [pc, #536]	; (8000664 <fsm_automatic_run+0x254>)
 800044c:	f001 fabb 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_YELLOW_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 618d 	mov.w	r1, #1128	; 0x468
 8000456:	4883      	ldr	r0, [pc, #524]	; (8000664 <fsm_automatic_run+0x254>)
 8000458:	f001 fab5 	bl	80019c6 <HAL_GPIO_WritePin>
				setTimer1(y*1000);
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000462:	fb02 f303 	mul.w	r3, r2, r3
 8000466:	4618      	mov	r0, r3
 8000468:	f000 feea 	bl	8001240 <setTimer1>
			break;
 800046c:	e0f4      	b.n	8000658 <fsm_automatic_run+0x248>
		case AUTO_GREEN:
			if(ped == 1){
 800046e:	4b7e      	ldr	r3, [pc, #504]	; (8000668 <fsm_automatic_run+0x258>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d119      	bne.n	80004aa <fsm_automatic_run+0x9a>
				if(timer3_flag == 1){
 8000476:	4b7d      	ldr	r3, [pc, #500]	; (800066c <fsm_automatic_run+0x25c>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b01      	cmp	r3, #1
 800047c:	d102      	bne.n	8000484 <fsm_automatic_run+0x74>
					ped = 0;
 800047e:	4b7a      	ldr	r3, [pc, #488]	; (8000668 <fsm_automatic_run+0x258>)
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOB, PED_RED_Pin, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	2140      	movs	r1, #64	; 0x40
 8000488:	4876      	ldr	r0, [pc, #472]	; (8000664 <fsm_automatic_run+0x254>)
 800048a:	f001 fa9c 	bl	80019c6 <HAL_GPIO_WritePin>
				PWM = PWM+10;
 800048e:	4b78      	ldr	r3, [pc, #480]	; (8000670 <fsm_automatic_run+0x260>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	330a      	adds	r3, #10
 8000494:	4a76      	ldr	r2, [pc, #472]	; (8000670 <fsm_automatic_run+0x260>)
 8000496:	6013      	str	r3, [r2, #0]
				if(PWM == 950){
 8000498:	4b75      	ldr	r3, [pc, #468]	; (8000670 <fsm_automatic_run+0x260>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f240 32b6 	movw	r2, #950	; 0x3b6
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d102      	bne.n	80004aa <fsm_automatic_run+0x9a>
					PWM = 0;
 80004a4:	4b72      	ldr	r3, [pc, #456]	; (8000670 <fsm_automatic_run+0x260>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer2_flag == 1){
 80004aa:	4b72      	ldr	r3, [pc, #456]	; (8000674 <fsm_automatic_run+0x264>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d108      	bne.n	80004c4 <fsm_automatic_run+0xb4>
				// each second timer red counter subtract 1
				setTimer2(1000);
 80004b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b6:	f000 fedd 	bl	8001274 <setTimer2>
				global_green--;
 80004ba:	4b6f      	ldr	r3, [pc, #444]	; (8000678 <fsm_automatic_run+0x268>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	3b01      	subs	r3, #1
 80004c0:	4a6d      	ldr	r2, [pc, #436]	; (8000678 <fsm_automatic_run+0x268>)
 80004c2:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 80004c4:	4b6d      	ldr	r3, [pc, #436]	; (800067c <fsm_automatic_run+0x26c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	f040 80c0 	bne.w	800064e <fsm_automatic_run+0x23e>
				PWM = 0;
 80004ce:	4b68      	ldr	r3, [pc, #416]	; (8000670 <fsm_automatic_run+0x260>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
				status = AUTO_YELLOW;
 80004d4:	4b62      	ldr	r3, [pc, #392]	; (8000660 <fsm_automatic_run+0x250>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2108      	movs	r1, #8
 80004de:	4861      	ldr	r0, [pc, #388]	; (8000664 <fsm_automatic_run+0x254>)
 80004e0:	f001 fa71 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_GREEN_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80004ea:	485e      	ldr	r0, [pc, #376]	; (8000664 <fsm_automatic_run+0x254>)
 80004ec:	f001 fa6b 	bl	80019c6 <HAL_GPIO_WritePin>
				setTimer1(z*1000);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004f6:	fb02 f303 	mul.w	r3, r2, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fea0 	bl	8001240 <setTimer1>
			}

			break;
 8000500:	e0a5      	b.n	800064e <fsm_automatic_run+0x23e>
		case AUTO_YELLOW:
			if(ped == 1){
 8000502:	4b59      	ldr	r3, [pc, #356]	; (8000668 <fsm_automatic_run+0x258>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d119      	bne.n	800053e <fsm_automatic_run+0x12e>
				if(timer3_flag == 1){
 800050a:	4b58      	ldr	r3, [pc, #352]	; (800066c <fsm_automatic_run+0x25c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d102      	bne.n	8000518 <fsm_automatic_run+0x108>
					ped = 0;
 8000512:	4b55      	ldr	r3, [pc, #340]	; (8000668 <fsm_automatic_run+0x258>)
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOB, PED_RED_Pin, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	2140      	movs	r1, #64	; 0x40
 800051c:	4851      	ldr	r0, [pc, #324]	; (8000664 <fsm_automatic_run+0x254>)
 800051e:	f001 fa52 	bl	80019c6 <HAL_GPIO_WritePin>
				PWM = PWM+10;
 8000522:	4b53      	ldr	r3, [pc, #332]	; (8000670 <fsm_automatic_run+0x260>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	330a      	adds	r3, #10
 8000528:	4a51      	ldr	r2, [pc, #324]	; (8000670 <fsm_automatic_run+0x260>)
 800052a:	6013      	str	r3, [r2, #0]
				if(PWM == 950){
 800052c:	4b50      	ldr	r3, [pc, #320]	; (8000670 <fsm_automatic_run+0x260>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f240 32b6 	movw	r2, #950	; 0x3b6
 8000534:	4293      	cmp	r3, r2
 8000536:	d102      	bne.n	800053e <fsm_automatic_run+0x12e>
					PWM = 0;
 8000538:	4b4d      	ldr	r3, [pc, #308]	; (8000670 <fsm_automatic_run+0x260>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer2_flag == 1){
 800053e:	4b4d      	ldr	r3, [pc, #308]	; (8000674 <fsm_automatic_run+0x264>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d108      	bne.n	8000558 <fsm_automatic_run+0x148>
				// each second timer red counter subtract 1
				setTimer2(1000);
 8000546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054a:	f000 fe93 	bl	8001274 <setTimer2>
				global_yellow--;
 800054e:	4b4c      	ldr	r3, [pc, #304]	; (8000680 <fsm_automatic_run+0x270>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	4a4a      	ldr	r2, [pc, #296]	; (8000680 <fsm_automatic_run+0x270>)
 8000556:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 8000558:	4b48      	ldr	r3, [pc, #288]	; (800067c <fsm_automatic_run+0x26c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d178      	bne.n	8000652 <fsm_automatic_run+0x242>
				PWM = 0 ;
 8000560:	4b43      	ldr	r3, [pc, #268]	; (8000670 <fsm_automatic_run+0x260>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
				status = AUTO_RED;
 8000566:	4b3e      	ldr	r3, [pc, #248]	; (8000660 <fsm_automatic_run+0x250>)
 8000568:	2202      	movs	r2, #2
 800056a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, 0);
 800056c:	2200      	movs	r2, #0
 800056e:	2120      	movs	r1, #32
 8000570:	483c      	ldr	r0, [pc, #240]	; (8000664 <fsm_automatic_run+0x254>)
 8000572:	f001 fa28 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin|LED_GREEN_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 618b 	mov.w	r1, #1112	; 0x458
 800057c:	4839      	ldr	r0, [pc, #228]	; (8000664 <fsm_automatic_run+0x254>)
 800057e:	f001 fa22 	bl	80019c6 <HAL_GPIO_WritePin>
				setTimer1(x*1000);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000588:	fb02 f303 	mul.w	r3, r2, r3
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fe57 	bl	8001240 <setTimer1>
			}

			break;
 8000592:	e05e      	b.n	8000652 <fsm_automatic_run+0x242>
		case AUTO_RED:
			if(ped == 1){
 8000594:	4b34      	ldr	r3, [pc, #208]	; (8000668 <fsm_automatic_run+0x258>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d11a      	bne.n	80005d2 <fsm_automatic_run+0x1c2>
				if(timer3_flag == 1){
 800059c:	4b33      	ldr	r3, [pc, #204]	; (800066c <fsm_automatic_run+0x25c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d102      	bne.n	80005aa <fsm_automatic_run+0x19a>
					ped = 0;
 80005a4:	4b30      	ldr	r3, [pc, #192]	; (8000668 <fsm_automatic_run+0x258>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOB, PED_GREEN_Pin, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b0:	482c      	ldr	r0, [pc, #176]	; (8000664 <fsm_automatic_run+0x254>)
 80005b2:	f001 fa08 	bl	80019c6 <HAL_GPIO_WritePin>
				PWM = PWM+10;
 80005b6:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <fsm_automatic_run+0x260>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	330a      	adds	r3, #10
 80005bc:	4a2c      	ldr	r2, [pc, #176]	; (8000670 <fsm_automatic_run+0x260>)
 80005be:	6013      	str	r3, [r2, #0]
				if(PWM == 950){
 80005c0:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <fsm_automatic_run+0x260>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d102      	bne.n	80005d2 <fsm_automatic_run+0x1c2>
					PWM = 0;
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <fsm_automatic_run+0x260>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
				}
			}
			if(timer2_flag == 1){
 80005d2:	4b28      	ldr	r3, [pc, #160]	; (8000674 <fsm_automatic_run+0x264>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d108      	bne.n	80005ec <fsm_automatic_run+0x1dc>
				// each second timer red counter subtract 1
				setTimer2(1000);
 80005da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005de:	f000 fe49 	bl	8001274 <setTimer2>
				global_red--;
 80005e2:	4b28      	ldr	r3, [pc, #160]	; (8000684 <fsm_automatic_run+0x274>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a26      	ldr	r2, [pc, #152]	; (8000684 <fsm_automatic_run+0x274>)
 80005ea:	6013      	str	r3, [r2, #0]
			}
			if(timer1_flag == 1){
 80005ec:	4b23      	ldr	r3, [pc, #140]	; (800067c <fsm_automatic_run+0x26c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d118      	bne.n	8000626 <fsm_automatic_run+0x216>
				PWM = 0;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <fsm_automatic_run+0x260>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
				status = AUTO_GREEN;
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <fsm_automatic_run+0x250>)
 80005fc:	2203      	movs	r2, #3
 80005fe:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2110      	movs	r1, #16
 8000604:	4817      	ldr	r0, [pc, #92]	; (8000664 <fsm_automatic_run+0x254>)
 8000606:	f001 f9de 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_YELLOW_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 618d 	mov.w	r1, #1128	; 0x468
 8000610:	4814      	ldr	r0, [pc, #80]	; (8000664 <fsm_automatic_run+0x254>)
 8000612:	f001 f9d8 	bl	80019c6 <HAL_GPIO_WritePin>
				setTimer1(y*1000);
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800061c:	fb02 f303 	mul.w	r3, r2, r3
 8000620:	4618      	mov	r0, r3
 8000622:	f000 fe0d 	bl	8001240 <setTimer1>
			}
			if(ped == 1){
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <fsm_automatic_run+0x258>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d113      	bne.n	8000656 <fsm_automatic_run+0x246>
				if(timer3_flag == 1){
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <fsm_automatic_run+0x25c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d102      	bne.n	800063c <fsm_automatic_run+0x22c>
					ped = 0;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <fsm_automatic_run+0x258>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
				}
				HAL_GPIO_WritePin(GPIOB, PED_GREEN_Pin, 0);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <fsm_automatic_run+0x254>)
 8000644:	f001 f9bf 	bl	80019c6 <HAL_GPIO_WritePin>
			}
			break;
 8000648:	e005      	b.n	8000656 <fsm_automatic_run+0x246>
		default:
			break;
 800064a:	bf00      	nop
 800064c:	e004      	b.n	8000658 <fsm_automatic_run+0x248>
			break;
 800064e:	bf00      	nop
 8000650:	e002      	b.n	8000658 <fsm_automatic_run+0x248>
			break;
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <fsm_automatic_run+0x248>
			break;
 8000656:	bf00      	nop
		}
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000080 	.word	0x20000080
 8000664:	40010c00 	.word	0x40010c00
 8000668:	2000009c 	.word	0x2000009c
 800066c:	200000b4 	.word	0x200000b4
 8000670:	200000a0 	.word	0x200000a0
 8000674:	200000ac 	.word	0x200000ac
 8000678:	2000008c 	.word	0x2000008c
 800067c:	200000a4 	.word	0x200000a4
 8000680:	20000090 	.word	0x20000090
 8000684:	20000088 	.word	0x20000088

08000688 <fsm_automatic_run2>:
void fsm_automatic_run2(int x, int y, int z){
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
	switch(status1){
 8000694:	4b42      	ldr	r3, [pc, #264]	; (80007a0 <fsm_automatic_run2+0x118>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3b01      	subs	r3, #1
 800069a:	2b03      	cmp	r3, #3
 800069c:	d874      	bhi.n	8000788 <fsm_automatic_run2+0x100>
 800069e:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <fsm_automatic_run2+0x1c>)
 80006a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a4:	080006b5 	.word	0x080006b5
 80006a8:	08000753 	.word	0x08000753
 80006ac:	080006e3 	.word	0x080006e3
 80006b0:	0800071b 	.word	0x0800071b
		case INIT:
		    status1 = AUTO_GREEN;
 80006b4:	4b3a      	ldr	r3, [pc, #232]	; (80007a0 <fsm_automatic_run2+0x118>)
 80006b6:	2203      	movs	r2, #3
 80006b8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, LED_RED_2_Pin, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	4839      	ldr	r0, [pc, #228]	; (80007a4 <fsm_automatic_run2+0x11c>)
 80006c0:	f001 f981 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_2_Pin|LED_YELLOW_2_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 80006ca:	4836      	ldr	r0, [pc, #216]	; (80007a4 <fsm_automatic_run2+0x11c>)
 80006cc:	f001 f97b 	bl	80019c6 <HAL_GPIO_WritePin>
				setTimer3(x*1000);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d6:	fb02 f303 	mul.w	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fde4 	bl	80012a8 <setTimer3>
			break;
 80006e0:	e059      	b.n	8000796 <fsm_automatic_run2+0x10e>
		case AUTO_GREEN:
			if(timer3_flag == 1){
 80006e2:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <fsm_automatic_run2+0x120>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d150      	bne.n	800078c <fsm_automatic_run2+0x104>
				status1 = AUTO_YELLOW;
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <fsm_automatic_run2+0x118>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_2_Pin, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f6:	482b      	ldr	r0, [pc, #172]	; (80007a4 <fsm_automatic_run2+0x11c>)
 80006f8:	f001 f965 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_RED_2_Pin|LED_YELLOW_2_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
 8000702:	4828      	ldr	r0, [pc, #160]	; (80007a4 <fsm_automatic_run2+0x11c>)
 8000704:	f001 f95f 	bl	80019c6 <HAL_GPIO_WritePin>
				setTimer3(y*1000);
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800070e:	fb02 f303 	mul.w	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 fdc8 	bl	80012a8 <setTimer3>
			}
			break;
 8000718:	e038      	b.n	800078c <fsm_automatic_run2+0x104>
		case AUTO_YELLOW:
			if(timer3_flag == 1){
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <fsm_automatic_run2+0x120>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d136      	bne.n	8000790 <fsm_automatic_run2+0x108>
				status1 = AUTO_RED;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <fsm_automatic_run2+0x118>)
 8000724:	2202      	movs	r2, #2
 8000726:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_2_Pin, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	481d      	ldr	r0, [pc, #116]	; (80007a4 <fsm_automatic_run2+0x11c>)
 8000730:	f001 f949 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_2_Pin|LED_RED_2_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 800073a:	481a      	ldr	r0, [pc, #104]	; (80007a4 <fsm_automatic_run2+0x11c>)
 800073c:	f001 f943 	bl	80019c6 <HAL_GPIO_WritePin>
				setTimer3(z*1000);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000746:	fb02 f303 	mul.w	r3, r2, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fdac 	bl	80012a8 <setTimer3>
			}
			break;
 8000750:	e01e      	b.n	8000790 <fsm_automatic_run2+0x108>
		case AUTO_RED:
			if(timer3_flag == 1){
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <fsm_automatic_run2+0x120>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d11c      	bne.n	8000794 <fsm_automatic_run2+0x10c>
				status1 = AUTO_GREEN;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <fsm_automatic_run2+0x118>)
 800075c:	2203      	movs	r2, #3
 800075e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, LED_RED_2_Pin, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2180      	movs	r1, #128	; 0x80
 8000764:	480f      	ldr	r0, [pc, #60]	; (80007a4 <fsm_automatic_run2+0x11c>)
 8000766:	f001 f92e 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_2_Pin|LED_YELLOW_2_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <fsm_automatic_run2+0x11c>)
 8000772:	f001 f928 	bl	80019c6 <HAL_GPIO_WritePin>
				setTimer3(x*1000);
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800077c:	fb02 f303 	mul.w	r3, r2, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fd91 	bl	80012a8 <setTimer3>
			}


			break;
 8000786:	e005      	b.n	8000794 <fsm_automatic_run2+0x10c>
		default:
			break;
 8000788:	bf00      	nop
 800078a:	e004      	b.n	8000796 <fsm_automatic_run2+0x10e>
			break;
 800078c:	bf00      	nop
 800078e:	e002      	b.n	8000796 <fsm_automatic_run2+0x10e>
			break;
 8000790:	bf00      	nop
 8000792:	e000      	b.n	8000796 <fsm_automatic_run2+0x10e>
			break;
 8000794:	bf00      	nop
		}
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000084 	.word	0x20000084
 80007a4:	40010c00 	.word	0x40010c00
 80007a8:	200000b4 	.word	0x200000b4

080007ac <fsm_automatic_run3>:
void fsm_automatic_run3()
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
			if(button_flag2 == 1)
 80007b0:	4b32      	ldr	r3, [pc, #200]	; (800087c <fsm_automatic_run3+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d107      	bne.n	80007c8 <fsm_automatic_run3+0x1c>
			{
				count = count + 1;
 80007b8:	4b31      	ldr	r3, [pc, #196]	; (8000880 <fsm_automatic_run3+0xd4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	4a30      	ldr	r2, [pc, #192]	; (8000880 <fsm_automatic_run3+0xd4>)
 80007c0:	6013      	str	r3, [r2, #0]
				button_flag2 = 0;
 80007c2:	4b2e      	ldr	r3, [pc, #184]	; (800087c <fsm_automatic_run3+0xd0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
			}
			if(count  == 0)
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <fsm_automatic_run3+0xd4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d116      	bne.n	80007fe <fsm_automatic_run3+0x52>
			{
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2110      	movs	r1, #16
 80007d4:	482b      	ldr	r0, [pc, #172]	; (8000884 <fsm_automatic_run3+0xd8>)
 80007d6:	f001 f8f6 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_YELLOW_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 618d 	mov.w	r1, #1128	; 0x468
 80007e0:	4828      	ldr	r0, [pc, #160]	; (8000884 <fsm_automatic_run3+0xd8>)
 80007e2:	f001 f8f0 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_2_Pin, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	4825      	ldr	r0, [pc, #148]	; (8000884 <fsm_automatic_run3+0xd8>)
 80007ee:	f001 f8ea 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_RED_2_Pin|LED_YELLOW_2_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <fsm_automatic_run3+0xd8>)
 80007fa:	f001 f8e4 	bl	80019c6 <HAL_GPIO_WritePin>
			}
			if(count == 1)
 80007fe:	4b20      	ldr	r3, [pc, #128]	; (8000880 <fsm_automatic_run3+0xd4>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d116      	bne.n	8000834 <fsm_automatic_run3+0x88>
			{
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2108      	movs	r1, #8
 800080a:	481e      	ldr	r0, [pc, #120]	; (8000884 <fsm_automatic_run3+0xd8>)
 800080c:	f001 f8db 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8000816:	481b      	ldr	r0, [pc, #108]	; (8000884 <fsm_automatic_run3+0xd8>)
 8000818:	f001 f8d5 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_2_Pin, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000822:	4818      	ldr	r0, [pc, #96]	; (8000884 <fsm_automatic_run3+0xd8>)
 8000824:	f001 f8cf 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_2_Pin|LED_RED_2_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 800082e:	4815      	ldr	r0, [pc, #84]	; (8000884 <fsm_automatic_run3+0xd8>)
 8000830:	f001 f8c9 	bl	80019c6 <HAL_GPIO_WritePin>
			}
			if(count == 2)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <fsm_automatic_run3+0xd4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d115      	bne.n	8000868 <fsm_automatic_run3+0xbc>
			{
				HAL_GPIO_WritePin(GPIOB, LED_RED_Pin, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <fsm_automatic_run3+0xd8>)
 8000842:	f001 f8c0 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin|LED_GREEN_Pin|PED_RED_Pin|PED_GREEN_Pin,1);
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 618b 	mov.w	r1, #1112	; 0x458
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <fsm_automatic_run3+0xd8>)
 800084e:	f001 f8ba 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_RED_2_Pin, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	480b      	ldr	r0, [pc, #44]	; (8000884 <fsm_automatic_run3+0xd8>)
 8000858:	f001 f8b5 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_2_Pin|LED_GREEN_2_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 8000862:	4808      	ldr	r0, [pc, #32]	; (8000884 <fsm_automatic_run3+0xd8>)
 8000864:	f001 f8af 	bl	80019c6 <HAL_GPIO_WritePin>
			}
			if(count == 3)
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <fsm_automatic_run3+0xd4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b03      	cmp	r3, #3
 800086e:	d102      	bne.n	8000876 <fsm_automatic_run3+0xca>
			{
				count = 0;
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <fsm_automatic_run3+0xd4>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
			}
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000074 	.word	0x20000074
 8000880:	20000098 	.word	0x20000098
 8000884:	40010c00 	.word	0x40010c00

08000888 <fsm_automatic_run4>:
void fsm_automatic_run4()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
			if(button_flag2 == 1)
 800088c:	4b55      	ldr	r3, [pc, #340]	; (80009e4 <fsm_automatic_run4+0x15c>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d107      	bne.n	80008a4 <fsm_automatic_run4+0x1c>
			{
				button_flag2 = 0;
 8000894:	4b53      	ldr	r3, [pc, #332]	; (80009e4 <fsm_automatic_run4+0x15c>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
				light_mode = light_mode +1;
 800089a:	4b53      	ldr	r3, [pc, #332]	; (80009e8 <fsm_automatic_run4+0x160>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	3301      	adds	r3, #1
 80008a0:	4a51      	ldr	r2, [pc, #324]	; (80009e8 <fsm_automatic_run4+0x160>)
 80008a2:	6013      	str	r3, [r2, #0]
			}
			if(light_mode  == 0)
 80008a4:	4b50      	ldr	r3, [pc, #320]	; (80009e8 <fsm_automatic_run4+0x160>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d116      	bne.n	80008da <fsm_automatic_run4+0x52>
			{
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80008b2:	484e      	ldr	r0, [pc, #312]	; (80009ec <fsm_automatic_run4+0x164>)
 80008b4:	f001 f887 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_YELLOW_Pin, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2128      	movs	r1, #40	; 0x28
 80008bc:	484b      	ldr	r0, [pc, #300]	; (80009ec <fsm_automatic_run4+0x164>)
 80008be:	f001 f882 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_2_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 80008c8:	4848      	ldr	r0, [pc, #288]	; (80009ec <fsm_automatic_run4+0x164>)
 80008ca:	f001 f87c 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_RED_2_Pin|LED_YELLOW_2_Pin, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 7120 	mov.w	r1, #640	; 0x280
 80008d4:	4845      	ldr	r0, [pc, #276]	; (80009ec <fsm_automatic_run4+0x164>)
 80008d6:	f001 f876 	bl	80019c6 <HAL_GPIO_WritePin>
			}
			if(light_mode == 1)
 80008da:	4b43      	ldr	r3, [pc, #268]	; (80009e8 <fsm_automatic_run4+0x160>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d116      	bne.n	8000910 <fsm_automatic_run4+0x88>
			{
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 6189 	mov.w	r1, #1096	; 0x448
 80008e8:	4840      	ldr	r0, [pc, #256]	; (80009ec <fsm_automatic_run4+0x164>)
 80008ea:	f001 f86c 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2130      	movs	r1, #48	; 0x30
 80008f2:	483e      	ldr	r0, [pc, #248]	; (80009ec <fsm_automatic_run4+0x164>)
 80008f4:	f001 f867 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_2_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80008fe:	483b      	ldr	r0, [pc, #236]	; (80009ec <fsm_automatic_run4+0x164>)
 8000900:	f001 f861 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_GREEN_2_Pin|LED_RED_2_Pin, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800090a:	4838      	ldr	r0, [pc, #224]	; (80009ec <fsm_automatic_run4+0x164>)
 800090c:	f001 f85b 	bl	80019c6 <HAL_GPIO_WritePin>
			}
			if(light_mode == 2)
 8000910:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <fsm_automatic_run4+0x160>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b02      	cmp	r3, #2
 8000916:	d116      	bne.n	8000946 <fsm_automatic_run4+0xbe>
			{
				HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|PED_RED_Pin|PED_GREEN_Pin, 1);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 618c 	mov.w	r1, #1120	; 0x460
 800091e:	4833      	ldr	r0, [pc, #204]	; (80009ec <fsm_automatic_run4+0x164>)
 8000920:	f001 f851 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin|LED_GREEN_Pin, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2118      	movs	r1, #24
 8000928:	4830      	ldr	r0, [pc, #192]	; (80009ec <fsm_automatic_run4+0x164>)
 800092a:	f001 f84c 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_RED_2_Pin |PED_RED_Pin|PED_GREEN_Pin, 1);
 800092e:	2201      	movs	r2, #1
 8000930:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8000934:	482d      	ldr	r0, [pc, #180]	; (80009ec <fsm_automatic_run4+0x164>)
 8000936:	f001 f846 	bl	80019c6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, LED_YELLOW_2_Pin|LED_GREEN_2_Pin, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000940:	482a      	ldr	r0, [pc, #168]	; (80009ec <fsm_automatic_run4+0x164>)
 8000942:	f001 f840 	bl	80019c6 <HAL_GPIO_WritePin>
			}
			if(light_mode == 3)
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <fsm_automatic_run4+0x160>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b03      	cmp	r3, #3
 800094c:	d102      	bne.n	8000954 <fsm_automatic_run4+0xcc>
			{
				light_mode = 0;
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <fsm_automatic_run4+0x160>)
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 0)
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <fsm_automatic_run4+0x168>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d112      	bne.n	8000982 <fsm_automatic_run4+0xfa>
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <fsm_automatic_run4+0x160>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d10e      	bne.n	8000982 <fsm_automatic_run4+0xfa>
			{
				global_green = global_green + 1;
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <fsm_automatic_run4+0x16c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <fsm_automatic_run4+0x16c>)
 800096c:	6013      	str	r3, [r2, #0]
				if(global_green == 10){
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <fsm_automatic_run4+0x16c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b0a      	cmp	r3, #10
 8000974:	d102      	bne.n	800097c <fsm_automatic_run4+0xf4>
					global_green = 0;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <fsm_automatic_run4+0x16c>)
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <fsm_automatic_run4+0x168>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 1)
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <fsm_automatic_run4+0x168>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d112      	bne.n	80009b0 <fsm_automatic_run4+0x128>
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <fsm_automatic_run4+0x160>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d10e      	bne.n	80009b0 <fsm_automatic_run4+0x128>
			{
				global_yellow = global_yellow + 1;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <fsm_automatic_run4+0x170>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <fsm_automatic_run4+0x170>)
 800099a:	6013      	str	r3, [r2, #0]
				if(global_yellow == 10){
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <fsm_automatic_run4+0x170>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b0a      	cmp	r3, #10
 80009a2:	d102      	bne.n	80009aa <fsm_automatic_run4+0x122>
					global_yellow = 0;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <fsm_automatic_run4+0x170>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <fsm_automatic_run4+0x168>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
			}
			if(button_flag3 == 1 && light_mode == 2)
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <fsm_automatic_run4+0x168>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d112      	bne.n	80009de <fsm_automatic_run4+0x156>
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <fsm_automatic_run4+0x160>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d10e      	bne.n	80009de <fsm_automatic_run4+0x156>
			{
				global_red = global_red + 1;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <fsm_automatic_run4+0x174>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	3301      	adds	r3, #1
 80009c6:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <fsm_automatic_run4+0x174>)
 80009c8:	6013      	str	r3, [r2, #0]
				if(global_red == 10){
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <fsm_automatic_run4+0x174>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b0a      	cmp	r3, #10
 80009d0:	d102      	bne.n	80009d8 <fsm_automatic_run4+0x150>
					global_red = 0;
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <fsm_automatic_run4+0x174>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
				}
				button_flag3 = 0;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <fsm_automatic_run4+0x168>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
			}
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000074 	.word	0x20000074
 80009e8:	20000094 	.word	0x20000094
 80009ec:	40010c00 	.word	0x40010c00
 80009f0:	20000078 	.word	0x20000078
 80009f4:	2000008c 	.word	0x2000008c
 80009f8:	20000090 	.word	0x20000090
 80009fc:	20000088 	.word	0x20000088

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a04:	f000 fcde 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a08:	f000 f85c 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f000 f960 	bl	8000cd0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a10:	f000 f89a 	bl	8000b48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a14:	f000 f8e4 	bl	8000be0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2 );
 8000a18:	481d      	ldr	r0, [pc, #116]	; (8000a90 <main+0x90>)
 8000a1a:	f001 fc25 	bl	8002268 <HAL_TIM_Base_Start_IT>
	status = INIT;
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <main+0x94>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
	status1 = INIT;
 8000a24:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <main+0x98>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
//	uint32_t PWM = 0;
	global_green = 3;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <main+0x9c>)
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	601a      	str	r2, [r3, #0]
	global_red = 5;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <main+0xa0>)
 8000a32:	2205      	movs	r2, #5
 8000a34:	601a      	str	r2, [r3, #0]
	global_yellow = 2;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <main+0xa4>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	601a      	str	r2, [r3, #0]
	SCH_Init();
 8000a3c:	f000 f9b8 	bl	8000db0 <SCH_Init>
	HAL_TIM_PWM_Start (&htim3, TIM_CHANNEL_1);
 8000a40:	2100      	movs	r1, #0
 8000a42:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <main+0xa8>)
 8000a44:	f001 fcb4 	bl	80023b0 <HAL_TIM_PWM_Start>
	SCH_Add_Task(control_unit, 0, 1);   // controll all the button and state machine
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4817      	ldr	r0, [pc, #92]	; (8000aac <main+0xac>)
 8000a4e:	f000 fa39 	bl	8000ec4 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput1, 0, 1);    /* USER CODE BEGIN 3 */
 8000a52:	2201      	movs	r2, #1
 8000a54:	2100      	movs	r1, #0
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <main+0xb0>)
 8000a58:	f000 fa34 	bl	8000ec4 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput2, 0, 1);    /* USER CODE BEGIN 3 */
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <main+0xb4>)
 8000a62:	f000 fa2f 	bl	8000ec4 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput3, 0, 1);    /* USER CODE BEGIN 3 */
 8000a66:	2201      	movs	r2, #1
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4813      	ldr	r0, [pc, #76]	; (8000ab8 <main+0xb8>)
 8000a6c:	f000 fa2a 	bl	8000ec4 <SCH_Add_Task>
	SCH_Add_Task(getKeyInput4, 0, 1);    /* USER CODE BEGIN 3 */
 8000a70:	2201      	movs	r2, #1
 8000a72:	2100      	movs	r1, #0
 8000a74:	4811      	ldr	r0, [pc, #68]	; (8000abc <main+0xbc>)
 8000a76:	f000 fa25 	bl	8000ec4 <SCH_Add_Task>
	setTimer2(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f000 fbfa 	bl	8001274 <setTimer2>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_YELLOW_Pin, 1);
	  	SCH_Dispatch_Tasks();
 8000a80:	f000 fa72 	bl	8000f68 <SCH_Dispatch_Tasks>
//	  		PWM++;
//	  		if(PWM == 950){
//	  			PWM = 0;
//	  		}
//	  	}
	  	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,PWM);
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <main+0xa8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <main+0xc0>)
 8000a8a:	6812      	ldr	r2, [r2, #0]
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
	  	SCH_Dispatch_Tasks();
 8000a8e:	e7f7      	b.n	8000a80 <main+0x80>
 8000a90:	2000042c 	.word	0x2000042c
 8000a94:	20000080 	.word	0x20000080
 8000a98:	20000084 	.word	0x20000084
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	20000088 	.word	0x20000088
 8000aa4:	20000090 	.word	0x20000090
 8000aa8:	200003e4 	.word	0x200003e4
 8000aac:	0800033d 	.word	0x0800033d
 8000ab0:	0800014d 	.word	0x0800014d
 8000ab4:	080001c9 	.word	0x080001c9
 8000ab8:	08000245 	.word	0x08000245
 8000abc:	080002c1 	.word	0x080002c1
 8000ac0:	200000a0 	.word	0x200000a0

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b090      	sub	sp, #64	; 0x40
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	2228      	movs	r2, #40	; 0x28
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 fade 	bl	8003094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aee:	2310      	movs	r3, #16
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000afa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 ff77 	bl	80019f8 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b10:	f000 f948 	bl	8000da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 f9e2 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b3a:	f000 f933 	bl	8000da4 <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3740      	adds	r7, #64	; 0x40
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b6e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b7c:	224f      	movs	r2, #79	; 0x4f
 8000b7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8c:	4813      	ldr	r0, [pc, #76]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000b8e:	f001 fb1b 	bl	80021c8 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b98:	f000 f904 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000baa:	f001 fe63 	bl	8002874 <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bb4:	f000 f8f6 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_TIM2_Init+0x94>)
 8000bc6:	f002 f9d7 	bl	8002f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bd0:	f000 f8e8 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000042c 	.word	0x2000042c

08000be0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	; 0x38
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	f107 0320 	add.w	r3, r7, #32
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c10:	4b2d      	ldr	r3, [pc, #180]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c12:	4a2e      	ldr	r2, [pc, #184]	; (8000ccc <MX_TIM3_Init+0xec>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c18:	223f      	movs	r2, #63	; 0x3f
 8000c1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b2a      	ldr	r3, [pc, #168]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c36:	4824      	ldr	r0, [pc, #144]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c38:	f001 fac6 	bl	80021c8 <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c42:	f000 f8af 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c50:	4619      	mov	r1, r3
 8000c52:	481d      	ldr	r0, [pc, #116]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c54:	f001 fe0e 	bl	8002874 <HAL_TIM_ConfigClockSource>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c5e:	f000 f8a1 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c62:	4819      	ldr	r0, [pc, #100]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c64:	f001 fb4c 	bl	8002300 <HAL_TIM_PWM_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c6e:	f000 f899 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000c82:	f002 f979 	bl	8002f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c8c:	f000 f88a 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c90:	2360      	movs	r3, #96	; 0x60
 8000c92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000c94:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4807      	ldr	r0, [pc, #28]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000caa:	f001 fd25 	bl	80026f8 <HAL_TIM_PWM_ConfigChannel>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000cb4:	f000 f876 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <MX_TIM3_Init+0xe8>)
 8000cba:	f000 fa57 	bl	800116c <HAL_TIM_MspPostInit>

}
 8000cbe:	bf00      	nop
 8000cc0:	3738      	adds	r7, #56	; 0x38
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200003e4 	.word	0x200003e4
 8000ccc:	40000400 	.word	0x40000400

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <MX_GPIO_Init+0xa8>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <MX_GPIO_Init+0xa8>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_GPIO_Init+0xa8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <MX_GPIO_Init+0xa8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <MX_GPIO_Init+0xa8>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_GPIO_Init+0xa8>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_Pin|PED_RED_Pin|PED_GREEN_Pin
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 8000d1a:	4818      	ldr	r0, [pc, #96]	; (8000d7c <MX_GPIO_Init+0xac>)
 8000d1c:	f000 fe53 	bl	80019c6 <HAL_GPIO_WritePin>
                          |LED_RED_2_Pin|LED_GREEN_2_Pin|LED_YELLOW_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_1_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin;
 8000d20:	2310      	movs	r3, #16
 8000d22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4619      	mov	r1, r3
 8000d32:	4813      	ldr	r0, [pc, #76]	; (8000d80 <MX_GPIO_Init+0xb0>)
 8000d34:	f000 fcb6 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin BUTTON_3_Pin BUTTON_4_Pin */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_4_Pin;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_GPIO_Init+0xac>)
 8000d4c:	f000 fcaa 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_YELLOW_Pin LED_GREEN_Pin LED_RED_Pin LED_PED_Pin
                           LED_RED_2_Pin LED_GREEN_2_Pin LED_YELLOW_2_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED_Pin|PED_RED_Pin|PED_GREEN_Pin
 8000d50:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000d54:	60bb      	str	r3, [r7, #8]
                          |LED_RED_2_Pin|LED_GREEN_2_Pin|LED_YELLOW_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	4619      	mov	r1, r3
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_GPIO_Init+0xac>)
 8000d6a:	f000 fc9b 	bl	80016a4 <HAL_GPIO_Init>

}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010c00 	.word	0x40010c00
 8000d80:	40010800 	.word	0x40010800

08000d84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
	timer_run();
 8000d8c:	f000 faa6 	bl	80012dc <timer_run>
	timer_run2();
 8000d90:	f000 fabe 	bl	8001310 <timer_run2>
	timer_run3();
 8000d94:	f000 fad6 	bl	8001344 <timer_run3>
	SCH_Update() ;
 8000d98:	f000 f824 	bl	8000de4 <SCH_Update>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x8>
	...

08000db0 <SCH_Init>:
 *  Created on: Dec 3, 2022
 *      Author: Hong Phat
 */

#include "scheduler.h"
void SCH_Init ( ) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
unsigned char i ;
for ( i = 0; i < SCH_MAX_TASKS; i ++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	71fb      	strb	r3, [r7, #7]
 8000dba:	e006      	b.n	8000dca <SCH_Init+0x1a>
SCH_Delete_Task ( i ) ;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f91e 	bl	8001000 <SCH_Delete_Task>
for ( i = 0; i < SCH_MAX_TASKS; i ++) {
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	71fb      	strb	r3, [r7, #7]
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b27      	cmp	r3, #39	; 0x27
 8000dce:	d9f5      	bls.n	8000dbc <SCH_Init+0xc>
 }
 Error_code_G = 0;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <SCH_Init+0x30>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
 }
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200000bd 	.word	0x200000bd

08000de4 <SCH_Update>:

  void SCH_Update ( void ) {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
  unsigned char Index ;

  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	71fb      	strb	r3, [r7, #7]
 8000dee:	e05d      	b.n	8000eac <SCH_Update+0xc8>
  if ( SCH_tasks_G[ Index ] . pTask ) {
 8000df0:	79fa      	ldrb	r2, [r7, #7]
 8000df2:	4933      	ldr	r1, [pc, #204]	; (8000ec0 <SCH_Update+0xdc>)
 8000df4:	4613      	mov	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d050      	beq.n	8000ea6 <SCH_Update+0xc2>
 if ( SCH_tasks_G [ Index ] . Delay == 0 ) {
 8000e04:	79fa      	ldrb	r2, [r7, #7]
 8000e06:	492e      	ldr	r1, [pc, #184]	; (8000ec0 <SCH_Update+0xdc>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	3304      	adds	r3, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d132      	bne.n	8000e80 <SCH_Update+0x9c>
  // The task i s due to run
  SCH_tasks_G [ Index ] .RunMe += 1;
 8000e1a:	79fa      	ldrb	r2, [r7, #7]
 8000e1c:	4928      	ldr	r1, [pc, #160]	; (8000ec0 <SCH_Update+0xdc>)
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	330c      	adds	r3, #12
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	79fa      	ldrb	r2, [r7, #7]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b2d8      	uxtb	r0, r3
 8000e32:	4923      	ldr	r1, [pc, #140]	; (8000ec0 <SCH_Update+0xdc>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	330c      	adds	r3, #12
 8000e40:	4602      	mov	r2, r0
 8000e42:	701a      	strb	r2, [r3, #0]
  if ( SCH_tasks_G [ Index ] . Period ) {
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	491e      	ldr	r1, [pc, #120]	; (8000ec0 <SCH_Update+0xdc>)
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	440b      	add	r3, r1
 8000e52:	3308      	adds	r3, #8
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d025      	beq.n	8000ea6 <SCH_Update+0xc2>
  // Schedule periodic tasks to run again
  SCH_tasks_G [ Index ] . Delay = SCH_tasks_G [ Index ] . Period ;
 8000e5a:	79f9      	ldrb	r1, [r7, #7]
 8000e5c:	79fa      	ldrb	r2, [r7, #7]
 8000e5e:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <SCH_Update+0xdc>)
 8000e60:	460b      	mov	r3, r1
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	440b      	add	r3, r1
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4403      	add	r3, r0
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	6819      	ldr	r1, [r3, #0]
 8000e6e:	4814      	ldr	r0, [pc, #80]	; (8000ec0 <SCH_Update+0xdc>)
 8000e70:	4613      	mov	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4403      	add	r3, r0
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	6019      	str	r1, [r3, #0]
 8000e7e:	e012      	b.n	8000ea6 <SCH_Update+0xc2>
  }
  } else {
  SCH_tasks_G [ Index ] . Delay -= 1;
 8000e80:	79fa      	ldrb	r2, [r7, #7]
 8000e82:	490f      	ldr	r1, [pc, #60]	; (8000ec0 <SCH_Update+0xdc>)
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	3304      	adds	r3, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	79fa      	ldrb	r2, [r7, #7]
 8000e94:	1e59      	subs	r1, r3, #1
 8000e96:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <SCH_Update+0xdc>)
 8000e98:	4613      	mov	r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	4413      	add	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4403      	add	r3, r0
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	6019      	str	r1, [r3, #0]
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b27      	cmp	r3, #39	; 0x27
 8000eb0:	d99e      	bls.n	8000df0 <SCH_Update+0xc>
  }
  }
  }
  }
 8000eb2:	bf00      	nop
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200000c0 	.word	0x200000c0

08000ec4 <SCH_Add_Task>:

  unsigned char SCH_Add_Task ( void ( * pFunction ) ( ) , unsigned int DELAY, unsigned int PERIOD)
  {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  unsigned char Index = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	75fb      	strb	r3, [r7, #23]
  while ( ( SCH_tasks_G [ Index ] . pTask != 0 ) && ( Index < SCH_MAX_TASKS) )
 8000ed4:	e002      	b.n	8000edc <SCH_Add_Task+0x18>
  {
  Index ++;
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	75fb      	strb	r3, [r7, #23]
  while ( ( SCH_tasks_G [ Index ] . pTask != 0 ) && ( Index < SCH_MAX_TASKS) )
 8000edc:	7dfa      	ldrb	r2, [r7, #23]
 8000ede:	4920      	ldr	r1, [pc, #128]	; (8000f60 <SCH_Add_Task+0x9c>)
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <SCH_Add_Task+0x32>
 8000ef0:	7dfb      	ldrb	r3, [r7, #23]
 8000ef2:	2b27      	cmp	r3, #39	; 0x27
 8000ef4:	d9ef      	bls.n	8000ed6 <SCH_Add_Task+0x12>
  }
  if ( Index == SCH_MAX_TASKS)
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	2b28      	cmp	r3, #40	; 0x28
 8000efa:	d104      	bne.n	8000f06 <SCH_Add_Task+0x42>
   {
   // Task l i s t i s f u l l
   Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <SCH_Add_Task+0xa0>)
 8000efe:	2204      	movs	r2, #4
 8000f00:	701a      	strb	r2, [r3, #0]
   return SCH_MAX_TASKS;
 8000f02:	2328      	movs	r3, #40	; 0x28
 8000f04:	e027      	b.n	8000f56 <SCH_Add_Task+0x92>
   }
   // I f we â€™re here , there i s a space in the task array
   SCH_tasks_G [ Index ] . pTask = pFunction ;
 8000f06:	7dfa      	ldrb	r2, [r7, #23]
 8000f08:	4915      	ldr	r1, [pc, #84]	; (8000f60 <SCH_Add_Task+0x9c>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	68fa      	ldr	r2, [r7, #12]
 8000f16:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] . Delay = DELAY;
 8000f18:	7dfa      	ldrb	r2, [r7, #23]
 8000f1a:	4911      	ldr	r1, [pc, #68]	; (8000f60 <SCH_Add_Task+0x9c>)
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	3304      	adds	r3, #4
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] . Period = PERIOD;
 8000f2c:	7dfa      	ldrb	r2, [r7, #23]
 8000f2e:	490c      	ldr	r1, [pc, #48]	; (8000f60 <SCH_Add_Task+0x9c>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	3308      	adds	r3, #8
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [ Index ] .RunMe = 0;
 8000f40:	7dfa      	ldrb	r2, [r7, #23]
 8000f42:	4907      	ldr	r1, [pc, #28]	; (8000f60 <SCH_Add_Task+0x9c>)
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	330c      	adds	r3, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
   return Index ;
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
   }
 8000f56:	4618      	mov	r0, r3
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	200000c0 	.word	0x200000c0
 8000f64:	200000bd 	.word	0x200000bd

08000f68 <SCH_Dispatch_Tasks>:

  void SCH_Dispatch_Tasks ( void )
  {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  unsigned char Index ;
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	e03a      	b.n	8000fea <SCH_Dispatch_Tasks+0x82>
  if ( SCH_tasks_G [ Index ] .RunMe > 0 ) {
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	4921      	ldr	r1, [pc, #132]	; (8000ffc <SCH_Dispatch_Tasks+0x94>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	440b      	add	r3, r1
 8000f82:	330c      	adds	r3, #12
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d02c      	beq.n	8000fe4 <SCH_Dispatch_Tasks+0x7c>
  ( * SCH_tasks_G [ Index ] . pTask ) ( ) ; // Run the task
 8000f8a:	79fa      	ldrb	r2, [r7, #7]
 8000f8c:	491b      	ldr	r1, [pc, #108]	; (8000ffc <SCH_Dispatch_Tasks+0x94>)
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4798      	blx	r3
  SCH_tasks_G [ Index ] .RunMe -= 1; // Reset / reduce RunMe fl a g
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	4917      	ldr	r1, [pc, #92]	; (8000ffc <SCH_Dispatch_Tasks+0x94>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	330c      	adds	r3, #12
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	b2d8      	uxtb	r0, r3
 8000fb4:	4911      	ldr	r1, [pc, #68]	; (8000ffc <SCH_Dispatch_Tasks+0x94>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	330c      	adds	r3, #12
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	701a      	strb	r2, [r3, #0]

  if ( SCH_tasks_G [ Index ] . Period == 0 )
 8000fc6:	79fa      	ldrb	r2, [r7, #7]
 8000fc8:	490c      	ldr	r1, [pc, #48]	; (8000ffc <SCH_Dispatch_Tasks+0x94>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3308      	adds	r3, #8
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d103      	bne.n	8000fe4 <SCH_Dispatch_Tasks+0x7c>
  {
  SCH_Delete_Task ( Index ) ;
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f80e 	bl	8001000 <SCH_Delete_Task>
  for ( Index = 0; Index < SCH_MAX_TASKS; Index++) {
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b27      	cmp	r3, #39	; 0x27
 8000fee:	d9c1      	bls.n	8000f74 <SCH_Dispatch_Tasks+0xc>
  }
  }
  }
  }
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000c0 	.word	0x200000c0

08001000 <SCH_Delete_Task>:

  unsigned char SCH_Delete_Task (  uint32_t TASK_INDEX) {
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
   if ( SCH_tasks_G [TASK_INDEX ] . pTask == 0 ) {
 8001008:	4920      	ldr	r1, [pc, #128]	; (800108c <SCH_Delete_Task+0x8c>)
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d106      	bne.n	800102a <SCH_Delete_Task+0x2a>
   Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 800101c:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <SCH_Delete_Task+0x90>)
 800101e:	2203      	movs	r2, #3
 8001020:	701a      	strb	r2, [r3, #0]
   Return_code = RETURN_ERROR;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <SCH_Delete_Task+0x94>)
 8001024:	2202      	movs	r2, #2
 8001026:	701a      	strb	r2, [r3, #0]
 8001028:	e002      	b.n	8001030 <SCH_Delete_Task+0x30>
   } else {
   Return_code = RETURN_NORMAL;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <SCH_Delete_Task+0x94>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
   }
   SCH_tasks_G [TASK_INDEX ] . pTask = 0x0000 ;
 8001030:	4916      	ldr	r1, [pc, #88]	; (800108c <SCH_Delete_Task+0x8c>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] . Delay = 0;
 8001042:	4912      	ldr	r1, [pc, #72]	; (800108c <SCH_Delete_Task+0x8c>)
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	3304      	adds	r3, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] . Period = 0;
 8001056:	490d      	ldr	r1, [pc, #52]	; (800108c <SCH_Delete_Task+0x8c>)
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	3308      	adds	r3, #8
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
   SCH_tasks_G [TASK_INDEX ] .RunMe = 0;
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <SCH_Delete_Task+0x8c>)
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	330c      	adds	r3, #12
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
   return Return_code ;
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SCH_Delete_Task+0x94>)
 8001080:	781b      	ldrb	r3, [r3, #0]
  }
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	200000c0 	.word	0x200000c0
 8001090:	200000bd 	.word	0x200000bd
 8001094:	200000bc 	.word	0x200000bc

08001098 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_MspInit+0x5c>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_MspInit+0x5c>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6193      	str	r3, [r2, #24]
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_MspInit+0x5c>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_MspInit+0x5c>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_MspInit+0x5c>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_MspInit+0x5c>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_MspInit+0x60>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_MspInit+0x60>)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010000 	.word	0x40010000

080010fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110c:	d114      	bne.n	8001138 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a14      	ldr	r2, [pc, #80]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	201c      	movs	r0, #28
 800112c:	f000 fa83 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001130:	201c      	movs	r0, #28
 8001132:	f000 fa9c 	bl	800166e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001136:	e010      	b.n	800115a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_TIM_Base_MspInit+0x6c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10b      	bne.n	800115a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <HAL_TIM_Base_MspInit+0x68>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40000400 	.word	0x40000400

0800116c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <HAL_TIM_MspPostInit+0x58>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d117      	bne.n	80011bc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_TIM_MspPostInit+0x5c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_TIM_MspPostInit+0x5c>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_TIM_MspPostInit+0x5c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011a4:	2340      	movs	r3, #64	; 0x40
 80011a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <HAL_TIM_MspPostInit+0x60>)
 80011b8:	f000 fa74 	bl	80016a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40000400 	.word	0x40000400
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010800 	.word	0x40010800

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001216:	f000 f91b 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <TIM2_IRQHandler+0x10>)
 8001226:	f001 f95f 	bl	80024e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000042c 	.word	0x2000042c

08001234 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <setTimer1>:
int timer3_flag = 0;
int timer3_counter = 0;

int timer_cycle = 10;

void setTimer1(int duration){
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	timer1_flag = 0;
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <setTimer1+0x28>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
	timer1_counter = duration / timer_cycle;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <setTimer1+0x2c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	fb92 f3f3 	sdiv	r3, r2, r3
 8001258:	4a05      	ldr	r2, [pc, #20]	; (8001270 <setTimer1+0x30>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	200000a4 	.word	0x200000a4
 800126c:	20000048 	.word	0x20000048
 8001270:	200000a8 	.word	0x200000a8

08001274 <setTimer2>:
void setTimer2(int duration){
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	timer2_flag = 0;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <setTimer2+0x28>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
	timer2_counter = duration / timer_cycle;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <setTimer2+0x2c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	fb92 f3f3 	sdiv	r3, r2, r3
 800128c:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <setTimer2+0x30>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200000ac 	.word	0x200000ac
 80012a0:	20000048 	.word	0x20000048
 80012a4:	200000b0 	.word	0x200000b0

080012a8 <setTimer3>:
void setTimer3(int duration){
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	timer3_flag = 0;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <setTimer3+0x28>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
	timer3_counter = duration / timer_cycle;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <setTimer3+0x2c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80012c0:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <setTimer3+0x30>)
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200000b4 	.word	0x200000b4
 80012d4:	20000048 	.word	0x20000048
 80012d8:	200000b8 	.word	0x200000b8

080012dc <timer_run>:

void timer_run(){
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	if(timer1_counter >= 0){
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <timer_run+0x2c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0b      	blt.n	8001300 <timer_run+0x24>
		timer1_counter--;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <timer_run+0x2c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4a06      	ldr	r2, [pc, #24]	; (8001308 <timer_run+0x2c>)
 80012f0:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <timer_run+0x2c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <timer_run+0x24>
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <timer_run+0x30>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
	}
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	200000a8 	.word	0x200000a8
 800130c:	200000a4 	.word	0x200000a4

08001310 <timer_run2>:
void timer_run2(){
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	if(timer2_counter >= 0){
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <timer_run2+0x2c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0b      	blt.n	8001334 <timer_run2+0x24>
		timer2_counter--;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <timer_run2+0x2c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3b01      	subs	r3, #1
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <timer_run2+0x2c>)
 8001324:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <timer_run2+0x2c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <timer_run2+0x24>
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <timer_run2+0x30>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
	}
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	200000b0 	.word	0x200000b0
 8001340:	200000ac 	.word	0x200000ac

08001344 <timer_run3>:
void timer_run3(){
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
	if(timer3_counter >= 0){
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <timer_run3+0x2c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0b      	blt.n	8001368 <timer_run3+0x24>
		timer3_counter--;
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <timer_run3+0x2c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	4a06      	ldr	r2, [pc, #24]	; (8001370 <timer_run3+0x2c>)
 8001358:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <timer_run3+0x2c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d102      	bne.n	8001368 <timer_run3+0x24>
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <timer_run3+0x30>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
	}
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	200000b8 	.word	0x200000b8
 8001374:	200000b4 	.word	0x200000b4

08001378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	; (80013b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	; (80013bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800139e:	f7ff ff49 	bl	8001234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f001 fe53 	bl	800304c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7ff fb2b 	bl	8000a00 <main>
  bx lr
 80013aa:	4770      	bx	lr
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80013b4:	080030e4 	.word	0x080030e4
  ldr r2, =_sbss
 80013b8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80013bc:	20000478 	.word	0x20000478

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x28>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f923 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	200f      	movs	r0, #15
 80013dc:	f000 f808 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fe5a 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f93b 	bl	800168a <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f903 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000044 	.word	0x20000044
 8001448:	20000050 	.word	0x20000050
 800144c:	2000004c 	.word	0x2000004c

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_IncTick+0x1c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_IncTick+0x20>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a03      	ldr	r2, [pc, #12]	; (8001470 <HAL_IncTick+0x20>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000050 	.word	0x20000050
 8001470:	20000474 	.word	0x20000474

08001474 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b02      	ldr	r3, [pc, #8]	; (8001484 <HAL_GetTick+0x10>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000474 	.word	0x20000474

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4906      	ldr	r1, [pc, #24]	; (8001520 <__NVIC_EnableIRQ+0x34>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff90 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff2d 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff42 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff90 	bl	8001578 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5f 	bl	8001524 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff35 	bl	80014ec <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b08b      	sub	sp, #44	; 0x2c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	e148      	b.n	800194a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b8:	2201      	movs	r2, #1
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8137 	bne.w	8001944 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4aa3      	ldr	r2, [pc, #652]	; (8001968 <HAL_GPIO_Init+0x2c4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d05e      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016e0:	4aa1      	ldr	r2, [pc, #644]	; (8001968 <HAL_GPIO_Init+0x2c4>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d875      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016e6:	4aa1      	ldr	r2, [pc, #644]	; (800196c <HAL_GPIO_Init+0x2c8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d058      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016ec:	4a9f      	ldr	r2, [pc, #636]	; (800196c <HAL_GPIO_Init+0x2c8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d86f      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016f2:	4a9f      	ldr	r2, [pc, #636]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d052      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016f8:	4a9d      	ldr	r2, [pc, #628]	; (8001970 <HAL_GPIO_Init+0x2cc>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d869      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016fe:	4a9d      	ldr	r2, [pc, #628]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d04c      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001704:	4a9b      	ldr	r2, [pc, #620]	; (8001974 <HAL_GPIO_Init+0x2d0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d863      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800170a:	4a9b      	ldr	r2, [pc, #620]	; (8001978 <HAL_GPIO_Init+0x2d4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d046      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001710:	4a99      	ldr	r2, [pc, #612]	; (8001978 <HAL_GPIO_Init+0x2d4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d85d      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 8001716:	2b12      	cmp	r3, #18
 8001718:	d82a      	bhi.n	8001770 <HAL_GPIO_Init+0xcc>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d859      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <HAL_GPIO_Init+0x80>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	0800179f 	.word	0x0800179f
 8001728:	08001779 	.word	0x08001779
 800172c:	0800178b 	.word	0x0800178b
 8001730:	080017cd 	.word	0x080017cd
 8001734:	080017d3 	.word	0x080017d3
 8001738:	080017d3 	.word	0x080017d3
 800173c:	080017d3 	.word	0x080017d3
 8001740:	080017d3 	.word	0x080017d3
 8001744:	080017d3 	.word	0x080017d3
 8001748:	080017d3 	.word	0x080017d3
 800174c:	080017d3 	.word	0x080017d3
 8001750:	080017d3 	.word	0x080017d3
 8001754:	080017d3 	.word	0x080017d3
 8001758:	080017d3 	.word	0x080017d3
 800175c:	080017d3 	.word	0x080017d3
 8001760:	080017d3 	.word	0x080017d3
 8001764:	080017d3 	.word	0x080017d3
 8001768:	08001781 	.word	0x08001781
 800176c:	08001795 	.word	0x08001795
 8001770:	4a82      	ldr	r2, [pc, #520]	; (800197c <HAL_GPIO_Init+0x2d8>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001776:	e02c      	b.n	80017d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e029      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	3304      	adds	r3, #4
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e024      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	3308      	adds	r3, #8
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e01f      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	330c      	adds	r3, #12
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e01a      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017a6:	2304      	movs	r3, #4
 80017a8:	623b      	str	r3, [r7, #32]
          break;
 80017aa:	e013      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b4:	2308      	movs	r3, #8
 80017b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	611a      	str	r2, [r3, #16]
          break;
 80017be:	e009      	b.n	80017d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c0:	2308      	movs	r3, #8
 80017c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	615a      	str	r2, [r3, #20]
          break;
 80017ca:	e003      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          break;
 80017d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2bff      	cmp	r3, #255	; 0xff
 80017d8:	d801      	bhi.n	80017de <HAL_GPIO_Init+0x13a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	e001      	b.n	80017e2 <HAL_GPIO_Init+0x13e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3304      	adds	r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	d802      	bhi.n	80017f0 <HAL_GPIO_Init+0x14c>
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x152>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3b08      	subs	r3, #8
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	210f      	movs	r1, #15
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	6a39      	ldr	r1, [r7, #32]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8090 	beq.w	8001944 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001824:	4b56      	ldr	r3, [pc, #344]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a55      	ldr	r2, [pc, #340]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b53      	ldr	r3, [pc, #332]	; (8001980 <HAL_GPIO_Init+0x2dc>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800183c:	4a51      	ldr	r2, [pc, #324]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2e4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1e0>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2e8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1dc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_GPIO_Init+0x2ec>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1d8>
 8001878:	2302      	movs	r3, #2
 800187a:	e004      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 800187c:	2303      	movs	r3, #3
 800187e:	e002      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_GPIO_Init+0x1e2>
 8001884:	2300      	movs	r3, #0
 8001886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001888:	f002 0203 	and.w	r2, r2, #3
 800188c:	0092      	lsls	r2, r2, #2
 800188e:	4093      	lsls	r3, r2
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4313      	orrs	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001896:	493b      	ldr	r1, [pc, #236]	; (8001984 <HAL_GPIO_Init+0x2e0>)
 8001898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4937      	ldr	r1, [pc, #220]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018be:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4933      	ldr	r1, [pc, #204]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	492d      	ldr	r1, [pc, #180]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	4929      	ldr	r1, [pc, #164]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 80018f0:	4013      	ands	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	4923      	ldr	r1, [pc, #140]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	43db      	mvns	r3, r3
 8001916:	491f      	ldr	r1, [pc, #124]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001918:	4013      	ands	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4919      	ldr	r1, [pc, #100]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	43db      	mvns	r3, r3
 800193e:	4915      	ldr	r1, [pc, #84]	; (8001994 <HAL_GPIO_Init+0x2f0>)
 8001940:	4013      	ands	r3, r2
 8001942:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	3301      	adds	r3, #1
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	f47f aeaf 	bne.w	80016b8 <HAL_GPIO_Init+0x14>
  }
}
 800195a:	bf00      	nop
 800195c:	bf00      	nop
 800195e:	372c      	adds	r7, #44	; 0x2c
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	10320000 	.word	0x10320000
 800196c:	10310000 	.word	0x10310000
 8001970:	10220000 	.word	0x10220000
 8001974:	10210000 	.word	0x10210000
 8001978:	10120000 	.word	0x10120000
 800197c:	10110000 	.word	0x10110000
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000
 8001988:	40010800 	.word	0x40010800
 800198c:	40010c00 	.word	0x40010c00
 8001990:	40011000 	.word	0x40011000
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	4013      	ands	r3, r2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e001      	b.n	80019ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	807b      	strh	r3, [r7, #2]
 80019d2:	4613      	mov	r3, r2
 80019d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019d6:	787b      	ldrb	r3, [r7, #1]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019e2:	e003      	b.n	80019ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	041a      	lsls	r2, r3, #16
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	611a      	str	r2, [r3, #16]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e26c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8087 	beq.w	8001b26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a18:	4b92      	ldr	r3, [pc, #584]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d00c      	beq.n	8001a3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a24:	4b8f      	ldr	r3, [pc, #572]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d112      	bne.n	8001a56 <HAL_RCC_OscConfig+0x5e>
 8001a30:	4b8c      	ldr	r3, [pc, #560]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3c:	d10b      	bne.n	8001a56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3e:	4b89      	ldr	r3, [pc, #548]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d06c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x12c>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d168      	bne.n	8001b24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e246      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x76>
 8001a60:	4b80      	ldr	r3, [pc, #512]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a7f      	ldr	r2, [pc, #508]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e02e      	b.n	8001acc <HAL_RCC_OscConfig+0xd4>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x98>
 8001a76:	4b7b      	ldr	r3, [pc, #492]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a7a      	ldr	r2, [pc, #488]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b78      	ldr	r3, [pc, #480]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a77      	ldr	r2, [pc, #476]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e01d      	b.n	8001acc <HAL_RCC_OscConfig+0xd4>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0xbc>
 8001a9a:	4b72      	ldr	r3, [pc, #456]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a71      	ldr	r2, [pc, #452]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b6f      	ldr	r3, [pc, #444]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a6e      	ldr	r2, [pc, #440]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	e00b      	b.n	8001acc <HAL_RCC_OscConfig+0xd4>
 8001ab4:	4b6b      	ldr	r3, [pc, #428]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a6a      	ldr	r2, [pc, #424]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b68      	ldr	r3, [pc, #416]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a67      	ldr	r2, [pc, #412]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d013      	beq.n	8001afc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff fcce 	bl	8001474 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001adc:	f7ff fcca 	bl	8001474 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	; 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e1fa      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0xe4>
 8001afa:	e014      	b.n	8001b26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fcba 	bl	8001474 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fcb6 	bl	8001474 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	; 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e1e6      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b16:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x10c>
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d063      	beq.n	8001bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b32:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b3e:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d11c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x18c>
 8001b4a:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d116      	bne.n	8001b84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b56:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_RCC_OscConfig+0x176>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e1ba      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4939      	ldr	r1, [pc, #228]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b82:	e03a      	b.n	8001bfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d020      	beq.n	8001bce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8c:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff fc6f 	bl	8001474 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fc6b 	bl	8001474 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e19b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4927      	ldr	r1, [pc, #156]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	600b      	str	r3, [r1, #0]
 8001bcc:	e015      	b.n	8001bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bce:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fc4e 	bl	8001474 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fc4a 	bl	8001474 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e17a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d03a      	beq.n	8001c7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d019      	beq.n	8001c42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_RCC_OscConfig+0x274>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c14:	f7ff fc2e 	bl	8001474 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fc2a 	bl	8001474 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e15a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f000 faa6 	bl	800218c <RCC_Delay>
 8001c40:	e01c      	b.n	8001c7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_RCC_OscConfig+0x274>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c48:	f7ff fc14 	bl	8001474 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4e:	e00f      	b.n	8001c70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c50:	f7ff fc10 	bl	8001474 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d908      	bls.n	8001c70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e140      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
 8001c62:	bf00      	nop
 8001c64:	40021000 	.word	0x40021000
 8001c68:	42420000 	.word	0x42420000
 8001c6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c70:	4b9e      	ldr	r3, [pc, #632]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1e9      	bne.n	8001c50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80a6 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8e:	4b97      	ldr	r3, [pc, #604]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10d      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b94      	ldr	r3, [pc, #592]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	4a93      	ldr	r2, [pc, #588]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	61d3      	str	r3, [r2, #28]
 8001ca6:	4b91      	ldr	r3, [pc, #580]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	4b8e      	ldr	r3, [pc, #568]	; (8001ef0 <HAL_RCC_OscConfig+0x4f8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d118      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a8a      	ldr	r2, [pc, #552]	; (8001ef0 <HAL_RCC_OscConfig+0x4f8>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cce:	f7ff fbd1 	bl	8001474 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd6:	f7ff fbcd 	bl	8001474 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b64      	cmp	r3, #100	; 0x64
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0fd      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	4b81      	ldr	r3, [pc, #516]	; (8001ef0 <HAL_RCC_OscConfig+0x4f8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x312>
 8001cfc:	4b7b      	ldr	r3, [pc, #492]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a7a      	ldr	r2, [pc, #488]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6213      	str	r3, [r2, #32]
 8001d08:	e02d      	b.n	8001d66 <HAL_RCC_OscConfig+0x36e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x334>
 8001d12:	4b76      	ldr	r3, [pc, #472]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a75      	ldr	r2, [pc, #468]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	6213      	str	r3, [r2, #32]
 8001d1e:	4b73      	ldr	r3, [pc, #460]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a72      	ldr	r2, [pc, #456]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	6213      	str	r3, [r2, #32]
 8001d2a:	e01c      	b.n	8001d66 <HAL_RCC_OscConfig+0x36e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d10c      	bne.n	8001d4e <HAL_RCC_OscConfig+0x356>
 8001d34:	4b6d      	ldr	r3, [pc, #436]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4a6c      	ldr	r2, [pc, #432]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6213      	str	r3, [r2, #32]
 8001d40:	4b6a      	ldr	r3, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	4a69      	ldr	r2, [pc, #420]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6213      	str	r3, [r2, #32]
 8001d4c:	e00b      	b.n	8001d66 <HAL_RCC_OscConfig+0x36e>
 8001d4e:	4b67      	ldr	r3, [pc, #412]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4a66      	ldr	r2, [pc, #408]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6213      	str	r3, [r2, #32]
 8001d5a:	4b64      	ldr	r3, [pc, #400]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	4a63      	ldr	r2, [pc, #396]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 0304 	bic.w	r3, r3, #4
 8001d64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d015      	beq.n	8001d9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fb81 	bl	8001474 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7ff fb7d 	bl	8001474 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e0ab      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	4b57      	ldr	r3, [pc, #348]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ee      	beq.n	8001d76 <HAL_RCC_OscConfig+0x37e>
 8001d98:	e014      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fb6b 	bl	8001474 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7ff fb67 	bl	8001474 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e095      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db8:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1ee      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d105      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dca:	4b48      	ldr	r3, [pc, #288]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4a47      	ldr	r2, [pc, #284]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8081 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001de0:	4b42      	ldr	r3, [pc, #264]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d061      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d146      	bne.n	8001e82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b3f      	ldr	r3, [pc, #252]	; (8001ef4 <HAL_RCC_OscConfig+0x4fc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fb3b 	bl	8001474 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff fb37 	bl	8001474 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e067      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e14:	4b35      	ldr	r3, [pc, #212]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f0      	bne.n	8001e02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d108      	bne.n	8001e3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e2a:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	492d      	ldr	r1, [pc, #180]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3c:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a19      	ldr	r1, [r3, #32]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	4927      	ldr	r1, [pc, #156]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x4fc>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7ff fb0b 	bl	8001474 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7ff fb07 	bl	8001474 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e037      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e74:	4b1d      	ldr	r3, [pc, #116]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x46a>
 8001e80:	e02f      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_RCC_OscConfig+0x4fc>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff faf4 	bl	8001474 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff faf0 	bl	8001474 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e020      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x498>
 8001eae:	e018      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e013      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	42420060 	.word	0x42420060

08001ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0d0      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4965      	ldr	r1, [pc, #404]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b8      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f54:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	494d      	ldr	r1, [pc, #308]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d040      	beq.n	8002018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d115      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e07f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e073      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e06b      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4936      	ldr	r1, [pc, #216]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe8:	f7ff fa44 	bl	8001474 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7ff fa40 	bl	8001474 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e053      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d210      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4922      	ldr	r1, [pc, #136]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e032      	b.n	80020ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4916      	ldr	r1, [pc, #88]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002086:	f000 f821 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800208a:	4602      	mov	r2, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	490a      	ldr	r1, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	5ccb      	ldrb	r3, [r1, r3]
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1cc>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1d0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f9a2 	bl	80013f0 <HAL_InitTick>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000
 80020bc:	40021000 	.word	0x40021000
 80020c0:	080030cc 	.word	0x080030cc
 80020c4:	20000044 	.word	0x20000044
 80020c8:	2000004c 	.word	0x2000004c

080020cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b490      	push	{r4, r7}
 80020ce:	b08a      	sub	sp, #40	; 0x28
 80020d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020d2:	4b2a      	ldr	r3, [pc, #168]	; (800217c <HAL_RCC_GetSysClockFreq+0xb0>)
 80020d4:	1d3c      	adds	r4, r7, #4
 80020d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020dc:	f240 2301 	movw	r3, #513	; 0x201
 80020e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b04      	cmp	r3, #4
 8002104:	d002      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x40>
 8002106:	2b08      	cmp	r3, #8
 8002108:	d003      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0x46>
 800210a:	e02d      	b.n	8002168 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210e:	623b      	str	r3, [r7, #32]
      break;
 8002110:	e02d      	b.n	800216e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	0c9b      	lsrs	r3, r3, #18
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800211e:	4413      	add	r3, r2
 8002120:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002124:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d013      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	0c5b      	lsrs	r3, r3, #17
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800213e:	4413      	add	r3, r2
 8002140:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002144:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4a0e      	ldr	r2, [pc, #56]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800214a:	fb02 f203 	mul.w	r2, r2, r3
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	e004      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <HAL_RCC_GetSysClockFreq+0xbc>)
 800215c:	fb02 f303 	mul.w	r3, r2, r3
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	623b      	str	r3, [r7, #32]
      break;
 8002166:	e002      	b.n	800216e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800216a:	623b      	str	r3, [r7, #32]
      break;
 800216c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216e:	6a3b      	ldr	r3, [r7, #32]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bc90      	pop	{r4, r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	080030bc 	.word	0x080030bc
 8002180:	40021000 	.word	0x40021000
 8002184:	007a1200 	.word	0x007a1200
 8002188:	003d0900 	.word	0x003d0900

0800218c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <RCC_Delay+0x34>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <RCC_Delay+0x38>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0a5b      	lsrs	r3, r3, #9
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	fb02 f303 	mul.w	r3, r2, r3
 80021a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021a8:	bf00      	nop
  }
  while (Delay --);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1e5a      	subs	r2, r3, #1
 80021ae:	60fa      	str	r2, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f9      	bne.n	80021a8 <RCC_Delay+0x1c>
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr
 80021c0:	20000044 	.word	0x20000044
 80021c4:	10624dd3 	.word	0x10624dd3

080021c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e041      	b.n	800225e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe ff84 	bl	80010fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3304      	adds	r3, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4610      	mov	r0, r2
 8002208:	f000 fc1c 	bl	8002a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d001      	beq.n	8002280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e035      	b.n	80022ec <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a16      	ldr	r2, [pc, #88]	; (80022f8 <HAL_TIM_Base_Start_IT+0x90>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d009      	beq.n	80022b6 <HAL_TIM_Base_Start_IT+0x4e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022aa:	d004      	beq.n	80022b6 <HAL_TIM_Base_Start_IT+0x4e>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a12      	ldr	r2, [pc, #72]	; (80022fc <HAL_TIM_Base_Start_IT+0x94>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d111      	bne.n	80022da <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b06      	cmp	r3, #6
 80022c6:	d010      	beq.n	80022ea <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d8:	e007      	b.n	80022ea <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0201 	orr.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40012c00 	.word	0x40012c00
 80022fc:	40000400 	.word	0x40000400

08002300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e041      	b.n	8002396 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f839 	bl	800239e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3304      	adds	r3, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f000 fb80 	bl	8002a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_TIM_PWM_Start+0x24>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e022      	b.n	800241a <HAL_TIM_PWM_Start+0x6a>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d109      	bne.n	80023ee <HAL_TIM_PWM_Start+0x3e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	bf14      	ite	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	2300      	moveq	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	e015      	b.n	800241a <HAL_TIM_PWM_Start+0x6a>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d109      	bne.n	8002408 <HAL_TIM_PWM_Start+0x58>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	bf14      	ite	ne
 8002400:	2301      	movne	r3, #1
 8002402:	2300      	moveq	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e008      	b.n	800241a <HAL_TIM_PWM_Start+0x6a>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b01      	cmp	r3, #1
 8002412:	bf14      	ite	ne
 8002414:	2301      	movne	r3, #1
 8002416:	2300      	moveq	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e059      	b.n	80024d6 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d104      	bne.n	8002432 <HAL_TIM_PWM_Start+0x82>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002430:	e013      	b.n	800245a <HAL_TIM_PWM_Start+0xaa>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b04      	cmp	r3, #4
 8002436:	d104      	bne.n	8002442 <HAL_TIM_PWM_Start+0x92>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002440:	e00b      	b.n	800245a <HAL_TIM_PWM_Start+0xaa>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b08      	cmp	r3, #8
 8002446:	d104      	bne.n	8002452 <HAL_TIM_PWM_Start+0xa2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002450:	e003      	b.n	800245a <HAL_TIM_PWM_Start+0xaa>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2201      	movs	r2, #1
 8002460:	6839      	ldr	r1, [r7, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f000 fd64 	bl	8002f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_TIM_PWM_Start+0x130>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d107      	bne.n	8002482 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002480:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <HAL_TIM_PWM_Start+0x130>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d009      	beq.n	80024a0 <HAL_TIM_PWM_Start+0xf0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002494:	d004      	beq.n	80024a0 <HAL_TIM_PWM_Start+0xf0>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <HAL_TIM_PWM_Start+0x134>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d111      	bne.n	80024c4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d010      	beq.n	80024d4 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0201 	orr.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c2:	e007      	b.n	80024d4 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0201 	orr.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40000400 	.word	0x40000400

080024e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d122      	bne.n	8002544 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b02      	cmp	r3, #2
 800250a:	d11b      	bne.n	8002544 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0202 	mvn.w	r2, #2
 8002514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fa6f 	bl	8002a0e <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa62 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fa71 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b04      	cmp	r3, #4
 8002550:	d122      	bne.n	8002598 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b04      	cmp	r3, #4
 800255e:	d11b      	bne.n	8002598 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0204 	mvn.w	r2, #4
 8002568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2202      	movs	r2, #2
 800256e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 fa45 	bl	8002a0e <HAL_TIM_IC_CaptureCallback>
 8002584:	e005      	b.n	8002592 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 fa38 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fa47 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d122      	bne.n	80025ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d11b      	bne.n	80025ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0208 	mvn.w	r2, #8
 80025bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2204      	movs	r2, #4
 80025c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fa1b 	bl	8002a0e <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fa0e 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fa1d 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d122      	bne.n	8002640 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b10      	cmp	r3, #16
 8002606:	d11b      	bne.n	8002640 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0210 	mvn.w	r2, #16
 8002610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2208      	movs	r2, #8
 8002616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f9f1 	bl	8002a0e <HAL_TIM_IC_CaptureCallback>
 800262c:	e005      	b.n	800263a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f9e4 	bl	80029fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f9f3 	bl	8002a20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d10e      	bne.n	800266c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0201 	mvn.w	r2, #1
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe fb8c 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d10e      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b80      	cmp	r3, #128	; 0x80
 8002686:	d107      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fcd1 	bl	800303a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d10e      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b40      	cmp	r3, #64	; 0x40
 80026b2:	d107      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f9b7 	bl	8002a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d10e      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d107      	bne.n	80026f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0220 	mvn.w	r2, #32
 80026e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fc9c 	bl	8003028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800270e:	2302      	movs	r3, #2
 8002710:	e0ac      	b.n	800286c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0c      	cmp	r3, #12
 800271e:	f200 809f 	bhi.w	8002860 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002722:	a201      	add	r2, pc, #4	; (adr r2, 8002728 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002728:	0800275d 	.word	0x0800275d
 800272c:	08002861 	.word	0x08002861
 8002730:	08002861 	.word	0x08002861
 8002734:	08002861 	.word	0x08002861
 8002738:	0800279d 	.word	0x0800279d
 800273c:	08002861 	.word	0x08002861
 8002740:	08002861 	.word	0x08002861
 8002744:	08002861 	.word	0x08002861
 8002748:	080027df 	.word	0x080027df
 800274c:	08002861 	.word	0x08002861
 8002750:	08002861 	.word	0x08002861
 8002754:	08002861 	.word	0x08002861
 8002758:	0800281f 	.word	0x0800281f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f9c6 	bl	8002af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0208 	orr.w	r2, r2, #8
 8002776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0204 	bic.w	r2, r2, #4
 8002786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6999      	ldr	r1, [r3, #24]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	619a      	str	r2, [r3, #24]
      break;
 800279a:	e062      	b.n	8002862 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fa0c 	bl	8002bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699a      	ldr	r2, [r3, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6999      	ldr	r1, [r3, #24]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	021a      	lsls	r2, r3, #8
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	619a      	str	r2, [r3, #24]
      break;
 80027dc:	e041      	b.n	8002862 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fa55 	bl	8002c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f042 0208 	orr.w	r2, r2, #8
 80027f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0204 	bic.w	r2, r2, #4
 8002808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69d9      	ldr	r1, [r3, #28]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	61da      	str	r2, [r3, #28]
      break;
 800281c:	e021      	b.n	8002862 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68b9      	ldr	r1, [r7, #8]
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fa9f 	bl	8002d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69da      	ldr	r2, [r3, #28]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69d9      	ldr	r1, [r3, #28]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	021a      	lsls	r2, r3, #8
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	61da      	str	r2, [r3, #28]
      break;
 800285e:	e000      	b.n	8002862 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002860:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_TIM_ConfigClockSource+0x18>
 8002888:	2302      	movs	r3, #2
 800288a:	e0b3      	b.n	80029f4 <HAL_TIM_ConfigClockSource+0x180>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c4:	d03e      	beq.n	8002944 <HAL_TIM_ConfigClockSource+0xd0>
 80028c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ca:	f200 8087 	bhi.w	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d2:	f000 8085 	beq.w	80029e0 <HAL_TIM_ConfigClockSource+0x16c>
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028da:	d87f      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028dc:	2b70      	cmp	r3, #112	; 0x70
 80028de:	d01a      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0xa2>
 80028e0:	2b70      	cmp	r3, #112	; 0x70
 80028e2:	d87b      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028e4:	2b60      	cmp	r3, #96	; 0x60
 80028e6:	d050      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x116>
 80028e8:	2b60      	cmp	r3, #96	; 0x60
 80028ea:	d877      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028ec:	2b50      	cmp	r3, #80	; 0x50
 80028ee:	d03c      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xf6>
 80028f0:	2b50      	cmp	r3, #80	; 0x50
 80028f2:	d873      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028f4:	2b40      	cmp	r3, #64	; 0x40
 80028f6:	d058      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x136>
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d86f      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 80028fc:	2b30      	cmp	r3, #48	; 0x30
 80028fe:	d064      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x156>
 8002900:	2b30      	cmp	r3, #48	; 0x30
 8002902:	d86b      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 8002904:	2b20      	cmp	r3, #32
 8002906:	d060      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x156>
 8002908:	2b20      	cmp	r3, #32
 800290a:	d867      	bhi.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
 800290c:	2b00      	cmp	r3, #0
 800290e:	d05c      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x156>
 8002910:	2b10      	cmp	r3, #16
 8002912:	d05a      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002914:	e062      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6899      	ldr	r1, [r3, #8]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f000 fae4 	bl	8002ef2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002938:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	609a      	str	r2, [r3, #8]
      break;
 8002942:	e04e      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6899      	ldr	r1, [r3, #8]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f000 facd 	bl	8002ef2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002966:	609a      	str	r2, [r3, #8]
      break;
 8002968:	e03b      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6859      	ldr	r1, [r3, #4]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	461a      	mov	r2, r3
 8002978:	f000 fa44 	bl	8002e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2150      	movs	r1, #80	; 0x50
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fa9b 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 8002988:	e02b      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6859      	ldr	r1, [r3, #4]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	461a      	mov	r2, r3
 8002998:	f000 fa62 	bl	8002e60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2160      	movs	r1, #96	; 0x60
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fa8b 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 80029a8:	e01b      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f000 fa24 	bl	8002e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2140      	movs	r1, #64	; 0x40
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fa7b 	bl	8002ebe <TIM_ITRx_SetConfig>
      break;
 80029c8:	e00b      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f000 fa72 	bl	8002ebe <TIM_ITRx_SetConfig>
        break;
 80029da:	e002      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029dc:	bf00      	nop
 80029de:	e000      	b.n	80029e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a25      	ldr	r2, [pc, #148]	; (8002aec <TIM_Base_SetConfig+0xa8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d007      	beq.n	8002a6c <TIM_Base_SetConfig+0x28>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a62:	d003      	beq.n	8002a6c <TIM_Base_SetConfig+0x28>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <TIM_Base_SetConfig+0xac>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d108      	bne.n	8002a7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <TIM_Base_SetConfig+0xa8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <TIM_Base_SetConfig+0x52>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d003      	beq.n	8002a96 <TIM_Base_SetConfig+0x52>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <TIM_Base_SetConfig+0xac>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d108      	bne.n	8002aa8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a07      	ldr	r2, [pc, #28]	; (8002aec <TIM_Base_SetConfig+0xa8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d103      	bne.n	8002adc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	615a      	str	r2, [r3, #20]
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40000400 	.word	0x40000400

08002af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f023 0201 	bic.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0303 	bic.w	r3, r3, #3
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f023 0302 	bic.w	r3, r3, #2
 8002b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <TIM_OC1_SetConfig+0xc8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d10c      	bne.n	8002b6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f023 0308 	bic.w	r3, r3, #8
 8002b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f023 0304 	bic.w	r3, r3, #4
 8002b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a13      	ldr	r2, [pc, #76]	; (8002bbc <TIM_OC1_SetConfig+0xc8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d111      	bne.n	8002b96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	621a      	str	r2, [r3, #32]
}
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40012c00 	.word	0x40012c00

08002bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f023 0210 	bic.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f023 0320 	bic.w	r3, r3, #32
 8002c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <TIM_OC2_SetConfig+0xd0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10d      	bne.n	8002c3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a14      	ldr	r2, [pc, #80]	; (8002c90 <TIM_OC2_SetConfig+0xd0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d113      	bne.n	8002c6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	621a      	str	r2, [r3, #32]
}
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	40012c00 	.word	0x40012c00

08002c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f023 0303 	bic.w	r3, r3, #3
 8002cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <TIM_OC3_SetConfig+0xd0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d10d      	bne.n	8002d0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <TIM_OC3_SetConfig+0xd0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d113      	bne.n	8002d3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	621a      	str	r2, [r3, #32]
}
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40012c00 	.word	0x40012c00

08002d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002db2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	031b      	lsls	r3, r3, #12
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a0f      	ldr	r2, [pc, #60]	; (8002e00 <TIM_OC4_SetConfig+0x98>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d109      	bne.n	8002ddc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	019b      	lsls	r3, r3, #6
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr
 8002e00:	40012c00 	.word	0x40012c00

08002e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f023 0201 	bic.w	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f023 030a 	bic.w	r3, r3, #10
 8002e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f023 0210 	bic.w	r2, r3, #16
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	031b      	lsls	r3, r3, #12
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	621a      	str	r2, [r3, #32]
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f043 0307 	orr.w	r3, r3, #7
 8002ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	609a      	str	r2, [r3, #8]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b087      	sub	sp, #28
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
 8002efe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	609a      	str	r2, [r3, #8]
}
 8002f26:	bf00      	nop
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bc80      	pop	{r7}
 8002f2e:	4770      	bx	lr

08002f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2201      	movs	r2, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1a      	ldr	r2, [r3, #32]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	43db      	mvns	r3, r3
 8002f52:	401a      	ands	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1a      	ldr	r2, [r3, #32]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	621a      	str	r2, [r3, #32]
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e041      	b.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a14      	ldr	r2, [pc, #80]	; (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d009      	beq.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fdc:	d004      	beq.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a10      	ldr	r2, [pc, #64]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d10c      	bne.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40000400 	.word	0x40000400

08003028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <__libc_init_array>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	2600      	movs	r6, #0
 8003050:	4d0c      	ldr	r5, [pc, #48]	; (8003084 <__libc_init_array+0x38>)
 8003052:	4c0d      	ldr	r4, [pc, #52]	; (8003088 <__libc_init_array+0x3c>)
 8003054:	1b64      	subs	r4, r4, r5
 8003056:	10a4      	asrs	r4, r4, #2
 8003058:	42a6      	cmp	r6, r4
 800305a:	d109      	bne.n	8003070 <__libc_init_array+0x24>
 800305c:	f000 f822 	bl	80030a4 <_init>
 8003060:	2600      	movs	r6, #0
 8003062:	4d0a      	ldr	r5, [pc, #40]	; (800308c <__libc_init_array+0x40>)
 8003064:	4c0a      	ldr	r4, [pc, #40]	; (8003090 <__libc_init_array+0x44>)
 8003066:	1b64      	subs	r4, r4, r5
 8003068:	10a4      	asrs	r4, r4, #2
 800306a:	42a6      	cmp	r6, r4
 800306c:	d105      	bne.n	800307a <__libc_init_array+0x2e>
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	f855 3b04 	ldr.w	r3, [r5], #4
 8003074:	4798      	blx	r3
 8003076:	3601      	adds	r6, #1
 8003078:	e7ee      	b.n	8003058 <__libc_init_array+0xc>
 800307a:	f855 3b04 	ldr.w	r3, [r5], #4
 800307e:	4798      	blx	r3
 8003080:	3601      	adds	r6, #1
 8003082:	e7f2      	b.n	800306a <__libc_init_array+0x1e>
 8003084:	080030dc 	.word	0x080030dc
 8003088:	080030dc 	.word	0x080030dc
 800308c:	080030dc 	.word	0x080030dc
 8003090:	080030e0 	.word	0x080030e0

08003094 <memset>:
 8003094:	4603      	mov	r3, r0
 8003096:	4402      	add	r2, r0
 8003098:	4293      	cmp	r3, r2
 800309a:	d100      	bne.n	800309e <memset+0xa>
 800309c:	4770      	bx	lr
 800309e:	f803 1b01 	strb.w	r1, [r3], #1
 80030a2:	e7f9      	b.n	8003098 <memset+0x4>

080030a4 <_init>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	bf00      	nop
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr

080030b0 <_fini>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	bf00      	nop
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr
